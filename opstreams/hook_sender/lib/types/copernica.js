// Generated by CoffeeScript 1.6.3
(function() {
  var Copernica_Base, Copernica_Profile, Copernica_Subprofile, async, collections, error, soap, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  async = require('async');

  _ = require('underscore');

  soap = require('soap');

  error = (function() {
    var errorMessages;
    errorMessages = {
      'invalidOptions': 'Invalid options. Options must meet the following conditions:',
      'notInitilaised': 'Client not initilaised. Make sure you run this.init( cb )',
      'notLoggedIn': 'Client not authenticated. Check credentials and reinitialise',
      'noDatabase': 'No database selected. Please use this.selectDb to select one',
      'noId': 'No identifier specified.',
      'emptyFields': 'No fields specified.'
    };
    return function(code, extra) {
      return {
        'code': code,
        'message': errorMessages[code],
        'extraInfo': extra != null ? extra : void 0
      };
    };
  })();

  /*
  # Copernica Field Definitions
  # name - Name of the field
  # type - Type of the field
  # value - Default value
  # display - display on overview pages
  # ordered - field order on overview pages
  # length - field length
  # textlines - number of text lines
  # hidden - is field hidden
  #
  # what else? who knows...
  */


  collections = {
    'Visits': {
      'Start_time': {
        'type': 'text',
        'value': '',
        'display': true,
        'ordered': false,
        'length': 50,
        'textlines': 1,
        'hidden': false,
        'index': true
      },
      'Length_of_visit': {
        'type': 'text',
        'value': '',
        'display': true,
        'ordered': false,
        'length': 50,
        'textlines': 1,
        'hidden': false,
        'index': true
      },
      'Number_of_pages_visited': {
        'type': 'text',
        'value': '',
        'display': true,
        'ordered': false,
        'length': 50,
        'textlines': 1,
        'hidden': false,
        'index': true
      },
      'Session_ID': {
        'type': 'text',
        'value': '',
        'display': true,
        'ordered': false,
        'length': 50,
        'textlines': 1,
        'hidden': false,
        'index': true
      }
    },
    'Pages': {
      'Page_title': {
        'type': 'text',
        'value': '',
        'display': true,
        'ordered': false,
        'length': 255,
        'textlines': 1,
        'hidden': false,
        'index': true
      },
      'Page_URL': {
        'type': 'text',
        'value': '',
        'display': true,
        'ordered': false,
        'length': 255,
        'textlines': 1,
        'hidden': false,
        'index': true
      },
      'Time': {
        'type': 'text',
        'value': '',
        'display': true,
        'ordered': false,
        'length': 50,
        'textlines': 1,
        'hidden': false,
        'index': true
      },
      'visit_id': {
        'type': 'integer',
        'value': 0,
        'display': true,
        'ordered': false,
        'hidden': false,
        'index': true
      },
      'pageview_id': {
        'type': 'integer',
        'value': 0,
        'display': true,
        'ordered': false,
        'hidden': false,
        'index': true
      }
    },
    'Links': {
      'Link_URL': {
        'type': 'text',
        'value': '',
        'display': true,
        'ordered': false,
        'length': 255,
        'textlines': 1,
        'hidden': false,
        'index': true
      },
      'Link_title': {
        'type': 'text',
        'value': '',
        'display': true,
        'ordered': false,
        'length': 255,
        'textlines': 1,
        'hidden': false,
        'index': true
      },
      'Time': {
        'type': 'text',
        'value': '',
        'display': true,
        'ordered': false,
        'length': 50,
        'textlines': 1,
        'hidden': false,
        'index': true
      }
    },
    'Forms': {
      'FormName': {
        'type': 'text',
        'value': '',
        'display': true,
        'ordered': false,
        'length': 255,
        'textlines': 1,
        'hidden': false,
        'index': true
      },
      'Time': {
        'type': 'text',
        'value': '',
        'display': true,
        'ordered': false,
        'length': 50,
        'textlines': 1,
        'hidden': false,
        'index': true
      },
      'FillID': {
        'type': 'integer',
        'value': 0,
        'display': true,
        'ordered': false,
        'hidden': false,
        'index': true
      }
    },
    'Downloads': {
      'DownloadName': {
        'type': 'text',
        'value': '',
        'display': true,
        'ordered': false,
        'length': 255,
        'textlines': 1,
        'hidden': false,
        'index': true
      },
      'Time': {
        'type': 'datetime',
        'value': '',
        'display': true,
        'ordered': false,
        'hidden': false,
        'index': true,
        'empty': true
      },
      'DownloadID': {
        'type': 'integer',
        'value': 0,
        'display': true,
        'ordered': false,
        'hidden': false,
        'index': true
      },
      'AutoCamp': {
        'type': 'text',
        'value': '',
        'display': true,
        'ordered': false,
        'length': 50,
        'textlines': 1,
        'hidden': false,
        'index': true
      }
    }
  };

  /*
  # Copernica Base Client
  */


  Copernica_Base = (function() {
    function Copernica_Base(options, callback) {
      var defaults, key, val, _ref;
      if (options == null) {
        options = {};
      }
      defaults = {
        'state': {},
        'url': 'http://mailmanager.livelinknewmedia.com/',
        'credentials': {
          'username': null,
          'account': null,
          'password': null
        },
        'database': null
      };
      if (typeof options === 'function') {
        callback = options;
        options = {};
      }
      this.options = _.extend(defaults, options);
      _ref = this.options.state;
      for (key in _ref) {
        val = _ref[key];
        this[key] = val;
      }
      if (typeof callback === 'function') {
        this.init(callback);
      }
    }

    Copernica_Base.prototype.init = function(callback) {
      var createClient, login, saveCredentials, selectDatabase,
        _this = this;
      async.waterfall([
        createClient = function(next) {
          if (_this.client != null) {
            return next(null, _this.client);
          } else {
            return soap.createClient("" + _this.options.url + "?SOAPAPI=WSDL", next);
          }
        }, login = function(client, next) {
          _this.client = client;
          if (_this.cookies != null) {
            return next(null, '_trakapo_alreadyGotCookies', 'yolo');
          } else {
            return client.login({
              'parameters': _this.options.credentials
            }, next);
          }
        }, saveCredentials = function(data, response, next) {
          var cookie, cookies, outCookies, _i, _len;
          if (data === '_trakapo_alreadyGotCookies') {
            return next(null, _this.cookies);
          } else {
            cookies = _this.client.lastResponseObj.headers['set-cookie'];
            outCookies = [];
            for (_i = 0, _len = cookies.length; _i < _len; _i++) {
              cookie = cookies[_i];
              if ('soap_' === cookie.substr(0, 5)) {
                outCookies.push(cookie);
              }
            }
            return next(null, outCookies);
          }
        }, selectDatabase = function(cookies, next) {
          _this.cookies = cookies;
          if (_this.currentDB != null) {
            return next(null, _this);
          } else if (_this.options.database != null) {
            return _this.selectDB(_this.options.database, next);
          } else {
            return next(null, _this);
          }
        }
      ], function(err, obj) {
        return callback(err, obj);
      });
      return this;
    };

    Copernica_Base.prototype.selectDB = function(identifier, callback) {
      var _this = this;
      this.request('Account_database', {
        'identifier': identifier
      }, {
        'noDb': true
      }, function(err, data) {
        _this.currentDB = data.result.database;
        return callback(err, _this);
      });
      return this;
    };

    Copernica_Base.prototype.getCollections = function(callback) {
      var params;
      params = {
        'allproperties': true
      };
      return this.request('Database_collections', params, function(err, data) {
        return callback(err, [].concat(data.result.items.collection));
      });
    };

    Copernica_Base.prototype.createCollection = function(name, callback) {
      var params;
      params = {
        'name': name
      };
      return this.request('Database_createCollection', params, function(err, data) {
        return callback(err, data.result.collection);
      });
    };

    Copernica_Base.prototype.removeCollection = function(id, callback) {
      var params;
      params = {
        'id': id
      };
      return this.request('Collection_remove', params, function(err, data) {
        if (err || data.result.value !== '1') {
          return callback(err || 'Unknown error');
        } else {
          return callback(err, this);
        }
      });
    };

    Copernica_Base.prototype.createCollectionField = function(definition, callback) {
      return this.request('Collection_createField', definition, function(err, data) {
        return callback(err, data.result.collectionfield);
      });
    };

    Copernica_Base.prototype.request = function(method, params, options, callback) {
      if (params == null) {
        params = {};
      }
      if (options == null) {
        options = {};
      }
      if ('function' === typeof params) {
        callback = params;
        params = {};
      } else if ('function' === typeof options) {
        callback = options;
        options = {};
      }
      if (this.client == null) {
        return callback(error('notInitilaised'));
      }
      if (this.cookies == null) {
        return callback(error('notLoggedIn'));
      }
      if (!options.noDb) {
        if (this.currentDB == null) {
          return callback(error('noDatabase'));
        }
        if (params.id == null) {
          params.id = this.currentDB.id;
        }
      }
      this.client[method]({
        'parameters': params
      }, callback, {
        'headers': {
          'Cookie': this.cookies.join(';')
        }
      });
      return this;
    };

    return Copernica_Base;

  })();

  /*
  # Simple Copernica Profile Model
  */


  Copernica_Profile = (function(_super) {
    __extends(Copernica_Profile, _super);

    function Copernica_Profile(options, callback) {
      var defaults;
      if (options == null) {
        options = {};
      }
      defaults = {};
      if (this.soapMethods == null) {
        this.soapMethods = {
          'search': 'Database_searchProfiles',
          'create': 'Database_createProfile',
          'update': 'Profile_updateFields',
          'remove': 'Profile_remove'
        };
      }
      if (this.returnProperties == null) {
        this.returnProperties = {
          'search': 'profile',
          'create': 'profile'
        };
      }
      if (typeof options === 'function') {
        callback = options;
        options = {};
      }
      Copernica_Profile.__super__.constructor.call(this, _.extend(defaults, options), callback);
    }

    Copernica_Profile.prototype.profile = function(id, fieldsToAdd, callback, subprofileOptions) {
      var createIfNeeded, loadProfile,
        _this = this;
      if (fieldsToAdd == null) {
        fieldsToAdd = {};
      }
      if (subprofileOptions == null) {
        subprofileOptions = false;
      }
      return async.waterfall([
        loadProfile = function(next) {
          return _this._search(id, subprofileOptions || {}, next);
        }, createIfNeeded = function(profile, next) {
          var row, _i, _len, _ref;
          if (profile.length === 0) {
            return _this._create(_.extend(id, fieldsToAdd), subprofileOptions || {}, function(err, data) {
              return next(err, data);
            });
          } else {
            profile = profile.shift();
            profile._fields = {};
            _ref = [].concat(profile.fields.pair);
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              row = _ref[_i];
              if (fieldsToAdd[row.key] != null) {
                profile._fields[row.key] = fieldsToAdd[row.key];
              } else {
                profile._fields[row.key] = row.value;
              }
            }
            return _this._update(profile.id, fieldsToAdd, function(err, data) {
              return next(err, profile);
            });
          }
        }
      ], function(err, profile) {
        if (!subprofileOptions) {
          _this.currentProfile = profile;
          return callback(err, _this);
        } else {
          return callback(err, profile);
        }
      });
    };

    Copernica_Profile.prototype.subprofile = function(id, fieldsToAdd, options, callback) {
      var opts;
      if (fieldsToAdd == null) {
        fieldsToAdd = {};
      }
      if (options == null) {
        options = {};
      }
      opts = {
        'state': {
          'client': this.client,
          'cookies': this.cookies,
          'currentDB': this.currentDB,
          'currentProfile': this.currentProfile
        }
      };
      return new Copernica_Subprofile(opts, function(err, obj) {
        return obj.profile(id, fieldsToAdd, callback, _.extend(options, {
          'id': opts.state.currentProfile.id
        }));
      });
    };

    Copernica_Profile.prototype._search_verify = function(query) {
      if (!((query.user_id != null) || (query.email != null))) {
        return error('invalidOptions', 'Must contain either "user_id" or "email"');
      }
      return false;
    };

    Copernica_Profile.prototype._search = function(query, options, callback) {
      var err, key, params, val,
        _this = this;
      if (options == null) {
        options = {};
      }
      if (typeof options === 'function') {
        callback = options;
        options = {};
      }
      if (err = this._search_verify(query)) {
        return callback(err);
      }
      params = {
        'allproperties': true,
        'requirements': []
      };
      params = _.extend(params, options);
      for (key in query) {
        val = query[key];
        params.requirements.push({
          'fieldname': key,
          'casesensitive': false,
          'operator': '=',
          'value': val
        });
      }
      return this.request(this.soapMethods.search, params, function(err, data) {
        var row, _i, _len, _ref;
        data = [].concat(data.result.items[_this.returnProperties.search]);
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          row = data[_i];
          if ((_ref = data.fields) != null) {
            _ref.pair = [].concat(data.fields.pair);
          }
        }
        return callback(err, data);
      });
    };

    Copernica_Profile.prototype._create_verify = function(fields) {
      if (!fields.user_id || !fields.email) {
        return error('invalidOptions', 'Must contain at least "user_id" and "email"');
      }
      return false;
    };

    Copernica_Profile.prototype._create = function(fields, options, callback) {
      var err, key, params, value,
        _this = this;
      if (options == null) {
        options = {};
      }
      if (typeof options === 'function') {
        callback = options;
        options = {};
      }
      if (err = this._create_verify(fields)) {
        callback(err);
      }
      params = {
        'fields': {
          'pair': []
        }
      };
      params = _.extend(params, options);
      for (key in fields) {
        value = fields[key];
        params.fields.pair.push({
          'key': key,
          'value': value
        });
      }
      return this.request(this.soapMethods.create, params, function(err, data) {
        var _ref;
        if ((_ref = data.result[_this.returnProperties.create].fields) != null) {
          _ref.pair = [].concat(data.result[_this.returnProperties.create].fields.pair);
        }
        return callback(err, data.result[_this.returnProperties.create]);
      });
    };

    Copernica_Profile.prototype._update = function(id, fields, callback) {
      var key, params, value,
        _this = this;
      if (id == null) {
        return callback(error('noId'));
      }
      if (Object.keys(fields).length === 0) {
        return callback(error('emptyFields'));
      }
      params = {
        'id': id,
        'timestamp': +(new Date) / 1000,
        'fields': {
          'pair': []
        }
      };
      for (key in fields) {
        value = fields[key];
        params.fields.pair.push({
          'key': key,
          'value': value
        });
      }
      return this.request(this.soapMethods.update, params, function(err, data) {
        if (err || data.result.value !== '1') {
          return callback(err || 'Unknown error');
        } else {
          return callback(err, _this);
        }
      });
    };

    Copernica_Profile.prototype._remove = function(id, callback) {
      var params;
      if (id == null) {
        return callback(error('noId'));
      }
      params = {
        'id': id
      };
      return this.request(this.soapMethods.remove, params, function(err, data) {
        if (err || data.result.value !== '1') {
          return callback(err || 'Unknown error');
        } else {
          return callback(err, this);
        }
      });
    };

    return Copernica_Profile;

  })(Copernica_Base);

  /*
  # Simple Copernica SubProfile model
  */


  Copernica_Subprofile = (function(_super) {
    __extends(Copernica_Subprofile, _super);

    function Copernica_Subprofile(options, callback) {
      var defaults;
      if (options == null) {
        options = {};
      }
      defaults = {};
      if (this.soapMethods == null) {
        this.soapMethods = {
          'search': 'Profile_searchSubProfiles',
          'create': 'Profile_createSubProfile',
          'update': 'SubProfile_updateFields',
          'remove': 'SubProfile_remove'
        };
      }
      if (this.returnProperties == null) {
        this.returnProperties = {
          'search': 'subprofile',
          'create': 'subprofile'
        };
      }
      if (typeof options === 'function') {
        callback = options;
        options = {};
      }
      Copernica_Subprofile.__super__.constructor.call(this, _.extend(defaults, options), callback);
    }

    Copernica_Subprofile.prototype._search_verify = function(query) {
      return false;
    };

    Copernica_Subprofile.prototype._create_verify = function(fields) {
      return false;
    };

    return Copernica_Subprofile;

  })(Copernica_Profile);

  /*
  # Trakapo HookService
  */


  module.exports = {
    'setup': function(options, callback) {
      var addMissingCollections, connectToCopernica, getCurrentCollections;
      return async.waterfall([
        connectToCopernica = function(next) {
          return new Copernica_Base(options, next);
        }, getCurrentCollections = function(copernica, next) {
          return copernica.getCollections(function(err, currentCollections) {
            console.log(err, currentCollections);
            return next(err, currentCollections, copernica);
          });
        }, addMissingCollections = function(currentCollections, copernica, next1) {
          return console.log(currentCollections);
          return async.map(Object.keys(collections), (function(collectionName, next2) {
            var createCollection, createFields, row, _i, _len;
            for (_i = 0, _len = currentCollections.length; _i < _len; _i++) {
              row = currentCollections[_i];
              if (collectionName === row.name) {
                return next2(null);
              }
            }
            return async.waterfall([
              createCollection = function(next3) {
                return copernica.createCollection(collectionName, next3);
              }, createFields = function(collection, next3) {
                var fields;
                fields = collections[collectionName];
                return async.map(fields, (function(fieldName, next4) {
                  var params;
                  params = fields[fieldName];
                  params.name = fieldName;
                  params.id = collection.id;
                  return copernica.createField(params, next4);
                }), next3);
              }
            ], next2);
          }), next1);
        }
      ], function(err, results) {
        return callback(err);
      });
    },
    'exec': function(options, data, callback) {
      return async.map(data, (function(profile, next) {
        var addSessions, loadCopernica, updateProfile;
        return async.waterfall([
          loadCopernica = function(next1) {
            var copProfile;
            return copProfile = new Copernica_Profile(options, next1);
          }, updateProfile = function(obj, next1) {
            return obj.profile({
              'user_id': profile._id,
              'email': profile.email
            }, {
              'score': profile.score,
              'name': profile.name
            }, next1);
          }, addSessions = function(obj, next1) {
            return async.map(profile.devices, (function(device, next2) {
              return async.map(device.sessions, (function(session, next3) {
                return obj.subprofile({
                  'session_id': session._id
                }, {
                  'did': session.did({
                    'actions': session.actions
                  })
                }, next3);
              }), next2);
            }), next1);
          }
        ], next);
      }), function(err, results) {
        return callback(err, results);
      });
    },
    '_classes': {
      'Copernica_Base': Copernica_Base,
      'Copernica_Profile': Copernica_Profile,
      'Copernica_Subprofile': Copernica_Subprofile
    }
  };

}).call(this);
