{
  "name": "shared-cache",
  "description": "Share information about cache states",
  "version": "0.2.1",
  "dependencies": {
    "redis": "*"
  },
  "main": "./lib/index",
  "readme": "# Shared Cache\n\nAllow applications share cache-state and data over Redis.\n\n# Usage\n```\nfunction update_info(cache_key, next) {\n    db.findOne({}, next)\n}\n\nCache = require('shared-cache')\ninfo = Cache.create('caching key', true, update_info)\n\npossibly_stale = info.get();\ninfo.get(function(err, definitely_not_stale) {\n    ...\n})\n```\n\n# Methods\n\n## create( key, auto_update, update_callback )\nReturns a caching instance from the singleton pool.\n\n## get( [callback] )\nThis function both returns and executes a callback.\n - In the event the data is not stale, both will receive the same value.\n - If the data is stale, the return will be the stale value whilst the callback is held until the data is available.\n\n## set( data, broadcast = true )\nUpdate the value of this cache, optionally broadcasting the new value to other instances. This marks the data as not stale.\n\n## update( callback )\nAdd the callback onto a queue to be fired when the update_callback returns, and call the update_callback if it hasn't already been called.\n\n## stale( broadcast = true )\nMark this data as stale. If auto_update is true then it update_callback is fired. If broadcast is true, other instances are notified to update their caches.\n",
  "readmeFilename": "README.md",
  "_id": "shared-cache@0.2.1",
  "_from": "shared-cache@*"
}
