// Generated by CoffeeScript 1.6.3
module.exports = function(stream, config, row) {
  var deleteColumn, getColumn, setColumn, xtend, _ref;
  xtend = require('xtend');
  _ref = require('./column_ops')(), getColumn = _ref.getColumn, setColumn = _ref.setColumn, deleteColumn = _ref.deleteColumn;
  return function(settings, old_fact, mid_fact) {
    var a, ac, b, field, i, j, k, list, mode, new_fact, orig, v, _i, _j, _ref1, _ref2, _ref3, _ref4, _ref5;
    new_fact = xtend(old_fact, mid_fact);
    _ref1 = settings.field_modes;
    for (field in _ref1) {
      mode = _ref1[field];
      if (!mid_fact[field]) {
        continue;
      }
      if (mode === 'all') {
        orig = old_fact[field] || [];
        if (!Array.isArray(orig)) {
          orig = [];
        }
        list = orig.concat(mid_fact[field]);
        for (k in list) {
          v = list[k];
          if (!v._time) {
            list[k] = {
              _time: config.time,
              _value: v
            };
          }
        }
        for (i = _i = 0, _ref2 = list.length; 0 <= _ref2 ? _i < _ref2 : _i > _ref2; i = 0 <= _ref2 ? ++_i : --_i) {
          if (!(a = list[i])) {
            continue;
          }
          ac = JSON.stringify(a._value);
          for (j = _j = _ref3 = i + 1, _ref4 = list.length; _ref3 <= _ref4 ? _j < _ref4 : _j > _ref4; j = _ref3 <= _ref4 ? ++_j : --_j) {
            if (b = list[j]) {
              if ((a._time - b._time === 0) && ac === JSON.stringify(b._value)) {
                list[j] = false;
              }
            }
          }
        }
        setColumn(new_fact, field, list.filter(function(v) {
          return !!v;
        }));
      }
      if (mode === 'oldest') {
        setColumn(new_fact, field, (_ref5 = old_fact[field]) != null ? _ref5 : mid_fact[field]);
      }
      if (mode === 'min') {
        a = Number(mid_fact[field]) || Math.min();
        b = Number(old_fact[field]) || Math.min();
        setColumn(new_fact, field, Math.min(a, b));
      }
      if (mode === 'max') {
        a = Number(mid_fact[field]) || Math.max();
        b = Number(old_fact[field]) || Math.max();
        setColumn(new_fact, field, Math.max(a, b));
      }
    }
    return new_fact;
  };
};
