// Generated by CoffeeScript 1.6.3
module.exports = function() {
  var deleteColumn, getColumn, setColumn;
  getColumn = function(row, column) {
    var e, index, last, left, m, parts, result, type, value, _i, _len;
    result = [];
    parts = column.split('.');
    left = parts.shift();
    column = parts.join('.');
    last = parts.length === 0;
    index = false;
    if (m = left.match(/(.+)\[(\*|-?[0-9]+)\]$/)) {
      left = m[1];
      index = Number(m[2]);
      index = (isNaN(index) ? false : index);
    }
    if (row[left] != null) {
      value = row[left];
      type = Object.prototype.toString.call(value).slice(8, -1).toString();
      if (type === 'Array') {
        value = (index !== false ? value.slice(index).slice(0, 1) : value);
        if (last) {
          return value;
        }
        for (_i = 0, _len = value.length; _i < _len; _i++) {
          e = value[_i];
          result = result.concat(getColumn(e, column));
        }
      } else if (type === 'Object') {
        if (last) {
          return [value];
        }
        result = result.concat(getColumn(value, column));
      } else if (last) {
        return [value];
      } else {
        throw "Attempted to get child (" + column + ") of an element which has no children (" + value + ", is a " + type + ").";
      }
    }
    return result;
  };
  setColumn = function(row, column, new_value) {
    var e, i, index, l, left, m, parts, type, value;
    if ((column == null) || column === "") {
      return row;
    }
    parts = column.split('.');
    left = parts.shift();
    column = parts.join('.');
    index = false;
    if (m = left.match(/(.+)\[(\*|-?[0-9]+)\]$/)) {
      left = m[1];
      index = Number(m[2]);
      index = (isNaN(index) ? false : index);
    }
    if (parts.length === 0) {
      if (index !== false) {
        if (row[left] == null) {
          row[left] = [];
        }
        if (index < 0) {
          l = row[left].length || 0;
          index = Math.max(0, l - index);
        }
        row[left][index] = new_value;
      } else {
        row[left] = new_value;
      }
      return row;
    }
    if (row[left] != null) {
      value = row[left];
      type = Object.prototype.toString.call(value).slice(8, -1).toString();
      if (type === 'Array') {
        value = (index !== false ? value.slice(index, 1) : value);
        for (i in value) {
          e = value[i];
          row[left][i] = setColumn(e, column, new_value);
        }
      } else if (type === 'Object') {
        row[left] = setColumn(value, column, new_value);
      } else {
        row[left] = new_value;
      }
    } else {
      type = Object.prototype.toString.call(new_value).slice(8, -1).toString();
      if (index === false || type === 'Object') {
        row[left] = setColumn({}, column, new_value);
      } else {
        row[left] = [];
        row[left][index] = setColumn({}, column, new_value);
      }
    }
    return row;
  };
  deleteColumn = function(row, column) {
    var e, key;
    if (row._id != null) {
      key = row._id.toString() + '.' + column;
    }
    try {
      column = "['" + column.replace(/\./g, "']['") + "']";
      eval("delete row" + column);
    } catch (_error) {
      e = _error;
      delete row[column];
    }
    return row;
  };
  return {
    getColumn: getColumn,
    setColumn: setColumn,
    deleteColumn: deleteColumn
  };
};
