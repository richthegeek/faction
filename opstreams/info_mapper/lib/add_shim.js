// Generated by CoffeeScript 1.6.3
module.exports = function(stream, config, row) {
  var async, bindFunctions, cache, evaluate, parseObject, _ref;
  cache = require('shared-cache');
  async = require('async');
  bindFunctions = require('./bind_functions')(stream, config, row);
  _ref = require('./eval')(stream, config, row), evaluate = _ref.evaluate, parseObject = _ref.parseObject;
  return function(data, account, db, table, type, callback) {
    var FKCache, loadFK, _settings,
      _this = this;
    FKCache = {};
    loadFK = function(properties, callback) {
      var next;
      if (FKCache[properties.key] != null) {
        return process.nextTick(function() {
          return callback(null, FKCache[properties.key]);
        });
      }
      next = function(err, data) {
        if (data) {
          FKCache[properties.key] = data;
        }
        return callback(err, data);
      };
      return parseObject(properties.query, {
        fact: data
      }, function(query) {
        return new config.models.fact(account, properties.fact_type, function() {
          if ((query._id != null) || properties.has === 'one') {
            return this.load(query, true, next);
          } else {
            return this.loadAll(query, true, next);
          }
        });
      });
    };
    _settings = cache.create('fact-settings-' + account.data._id, true, function(key, next) {
      return db.collection('fact_settings').find().toArray(next);
    });
    return _settings.get(function(err, allSettings) {
      var fk, fns, k, set, settings;
      settings = ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = allSettings.length; _i < _len; _i++) {
          set = allSettings[_i];
          if (set._id === type) {
            _results.push(set);
          }
        }
        return _results;
      })()).pop() || {};
      if (settings.foreign_keys == null) {
        settings.foreign_keys = {};
      }
      bindFunctions(data);
      data.getSettings = function() {
        return settings;
      };
      fns = (function() {
        var _ref1, _results;
        _ref1 = settings.foreign_keys;
        _results = [];
        for (k in _ref1) {
          fk = _ref1[k];
          _results.push((function(key, fk) {
            return fns.push(function(next) {
              return loadFK(fk, function(err, row) {
                return next(err, data.set(key, row));
              });
            });
          })(key, fk));
        }
        return _results;
      })();
      return async.parallel(fns, loadFKs, function() {
        return callback(null, data);
      });
    });
  };
};
