// Generated by CoffeeScript 1.6.3
var Model, check;

check = require('validator').check;

module.exports = Model = (function() {
  function Model(db, collection, callback) {
    var _this = this;
    mongodb.open(db, collection, function(err, db, table) {
      _this.db = db;
      _this.table = table;
      if (callback) {
        return callback.call(_this, _this, db, table);
      }
    });
  }

  Model.prototype["export"] = function() {
    return this.data;
  };

  Model.prototype.load = function(conditions, callback) {
    var _ref,
      _this = this;
    if ((conditions instanceof mongodb.ObjectID) || ((_ref = typeof conditions) === 'string' || _ref === 'number')) {
      conditions = {
        _id: conditions
      };
    }
    return this.table.findOne(conditions, function(err, row) {
      if (row) {
        _this.data = row;
      }
      return callback.call(_this, err, row);
    });
  };

  Model.prototype.loadPaginated = function(conditions, req, callback) {
    var skip, _base, _base1;
    if ((_base = req.query).page == null) {
      _base.page = 0;
    }
    if ((_base1 = req.query).limit == null) {
      _base1.limit = 100;
    }
    check(req.query.page, {
      isInt: 'The page query parameter must be numeric',
      min: 'The page query parameter must be greater than zero.'
    }).isInt().min(0);
    check(req.query.limit, {
      isInt: 'The limit query parameter must be numeric',
      min: 'The limit query parameter must be greater than one.'
    }).isInt().min(1);
    skip = req.query.page * req.query.limit;
    return this.table.find(conditions, function(err, cursor) {
      if (err) {
        return callback(err);
      }
      return cursor.count(function(err, size) {
        return cursor.skip(skip).limit(req.query.limit).toArray(function(err, items) {
          var response;
          response = {
            page: req.query.page,
            limit: req.query.limit,
            totalItems: size,
            totalPages: Math.ceil(size / req.query.limit),
            nextPage: null,
            prevPage: null,
            items: items
          };
          if (req.query.page + 1 < response.totalPages) {
            response.nextPage = req.path + ("?page=" + (req.query.page + 1) + "&limit=" + req.query.limit);
          }
          if (req.query.page > 0) {
            response.prevPage = req.path + ("?page=" + (req.query.page - 1) + "&limit=" + req.query.limit);
          }
          return callback(err, response);
        });
      });
    });
  };

  Model.prototype.save = function(callback) {
    return this.table.save(this.data, callback);
  };

  Model.prototype.remove = function(conditions, callback) {
    if (typeof conditions === 'function') {
      callback = conditions;
      conditions = {};
      conditions._id = this["export"]()._id;
      if (!data._id) {
        callback('Model does not have an ID, so remove was not called.');
      }
    }
    return this.table.remove(conditions, callback);
  };

  return Model;

})();
