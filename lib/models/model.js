// Generated by CoffeeScript 1.6.3
var Model, check;

check = require('validator').check;

module.exports = Model = (function() {
  function Model(db, collection, callback) {
    var _this = this;
    mongodb.open(db, collection, function(err, db, table) {
      _this.db = db;
      _this.table = table;
      if (callback) {
        return callback.call(_this, _this, db, table);
      }
    });
  }

  Model.prototype._spawn = function(callback) {
    return new this.constructor(this.db, this.table, callback);
  };

  Model.prototype["import"] = function(data, callback) {
    var k, v, _ref;
    this.data = this.data || {};
    _ref = data || {};
    for (k in _ref) {
      v = _ref[k];
      this.data[k] = v;
    }
    return callback.call(this, this.data);
  };

  Model.prototype["export"] = function() {
    return this.data;
  };

  Model.prototype.toJSON = function() {
    return this["export"]();
  };

  Model.prototype.load = function(conditions, callback) {
    var _ref,
      _this = this;
    if ((conditions instanceof mongodb.ObjectID) || ((_ref = typeof conditions) === 'string' || _ref === 'number')) {
      conditions = {
        _id: conditions
      };
    }
    return this.table.findOne(conditions, function(err, row) {
      return _this["import"](row, function() {
        return callback.call(_this, err, row, conditions);
      });
    });
  };

  Model.prototype.paramsToQuery = function(params) {
    var name, query, value;
    query = {};
    for (name in params) {
      value = params[name];
      name = name.replace(/-/g, '_');
      query[name] = value;
    }
    return query;
  };

  Model.prototype.loadParams = function(params, callback) {
    return this.load(params.asQuery(), callback);
  };

  Model.prototype.loadPaginated = function(conditions, req, callback) {
    var skip, _base, _base1,
      _this = this;
    if ((_base = req.query).page == null) {
      _base.page = 0;
    }
    if ((_base1 = req.query).limit == null) {
      _base1.limit = 100;
    }
    check(req.query.page, {
      isInt: 'The page query parameter must be numeric',
      min: 'The page query parameter must be greater than zero.'
    }).isInt().min(0);
    check(req.query.limit, {
      isInt: 'The limit query parameter must be numeric',
      min: 'The limit query parameter must be greater than one.'
    }).isInt().min(1);
    skip = req.query.page * req.query.limit;
    return this.table.find(conditions, function(err, cursor) {
      if (err) {
        return callback(err);
      }
      return cursor.count(function(err, size) {
        return cursor.skip(skip).limit(req.query.limit).toArray(function(err, items) {
          return new Grouped_Model(_this, items, function() {
            var response;
            response = {
              page: req.query.page,
              limit: req.query.limit,
              totalItems: size,
              totalPages: Math.ceil(size / req.query.limit),
              nextPage: null,
              prevPage: null,
              items: this
            };
            if (req.query.page + 1 < response.totalPages) {
              response.nextPage = req.path + ("?page=" + (req.query.page + 1) + "&limit=" + req.query.limit);
            }
            if (req.query.page > 0) {
              response.prevPage = req.path + ("?page=" + (req.query.page - 1) + "&limit=" + req.query.limit);
            }
            return callback.call(this, err, response);
          });
        });
      });
    });
  };

  Model.prototype.validate = function(data) {
    return null;
  };

  Model.prototype.save = function(callback) {
    var e,
      _this = this;
    try {
      this.validate(this["export"]());
    } catch (_error) {
      e = _error;
      return callback(e);
    }
    return this.table.save(this.data, function(err) {
      if (err) {
        throw err;
      }
      return callback.apply(_this, arguments);
    });
  };

  Model.prototype.remove = function(conditions, callback) {
    var _this = this;
    if (typeof conditions === 'function') {
      callback = conditions;
      conditions = {};
      conditions._id = this["export"]()._id;
      if (!conditions._id) {
        throw 'Model does not have an ID, so remove was not called.';
      }
    }
    return this.table.remove(conditions, function(err) {
      if (err) {
        throw err;
      }
      return callback.apply(_this, arguments);
    });
  };

  Model.prototype.update = function(query, data, callback) {
    var _this = this;
    return this.load(query, function(err, updated, query) {
      return _this["import"](data, function() {
        if (updated) {
          _this.before_update();
        } else {
          _this.before_create();
        }
        return _this.save(function(err) {
          return callback.call(_this, err, updated);
        });
      });
    });
  };

  Model.prototype.before_update = function() {
    return null;
  };

  Model.prototype.before_create = function() {
    return null;
  };

  return Model;

})();
