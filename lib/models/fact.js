// Generated by CoffeeScript 1.6.3
var Fact_Model, Model, async,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

async = require('async');

Model = require('./model');

module.exports = Fact_Model = (function(_super) {
  __extends(Fact_Model, _super);

  function Fact_Model(account, type, callback) {
    this.account = account;
    this.type = type;
    this.type = type.replace(/[^a-z0-9_]+/g, '_').substring(0, 60);
    Fact_Model.__super__.constructor.call(this, account.dbname(), this.collectionname(type), function(self, db, coll) {
      return callback.apply(this, arguments);
    });
  }

  Fact_Model.prototype._spawn = function(callback) {
    return new this.constructor(this.account, this.type, callback);
  };

  Fact_Model.prototype.collectionname = function(type) {
    return 'fact_' + type;
  };

  Fact_Model.route = function(req, res, next) {
    if (req.params['fact-type']) {
      return new Fact_Model(req.account, req.params['fact-type'], function() {
        req.model = this;
        return next();
      });
    } else {
      return next();
    }
  };

  Fact_Model.prototype.removeFull = function(callback) {
    return this.table.drop(callback);
  };

  Fact_Model.getTypes = function(account, callback) {
    return mongodb.open(account.dbname(), function(err, db) {
      return db.collectionNames(function(err, collections) {
        var coll, len, result;
        len = db.databaseName.length + 1;
        result = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = collections.length; _i < _len; _i++) {
            coll = collections[_i];
            if ('fact_' === coll.name.substring(len, len + 5)) {
              _results.push(coll.name.slice(len + 5));
            }
          }
          return _results;
        })();
        result.detailed = function(callback) {
          var iter;
          iter = function(type, next) {
            return new Fact_Model(account, type, function() {
              return this.table.count(function(err, size) {
                return next(err, {
                  fact_type: type,
                  fact_sources: 'todo',
                  count: size,
                  nextPage: "/facts/" + type
                });
              });
            });
          };
          return async.map(result, iter, function(err, info) {
            var fact, obj, _i, _len;
            if (err) {
              throw err;
            }
            obj = {};
            for (_i = 0, _len = info.length; _i < _len; _i++) {
              fact = info[_i];
              obj[fact.fact_type] = fact;
            }
            return callback(obj);
          });
        };
        return callback(result);
      });
    });
  };

  return Fact_Model;

})(Model);
