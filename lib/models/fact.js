// Generated by CoffeeScript 1.6.3
var Fact_Model, Model, async,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

async = require('async');

Model = require('./model');

module.exports = Fact_Model = (function(_super) {
  __extends(Fact_Model, _super);

  function Fact_Model(account, type, callback) {
    this.account = account;
    this.type = type;
    this.type = type.replace(/[^a-z0-9_]+/g, '_').substring(0, 60);
    Fact_Model.__super__.constructor.call(this, account.dbname(), this.collectionname(), function(self, db, coll) {
      return callback.apply(this, arguments);
    });
  }

  Fact_Model.prototype._spawn = function(callback) {
    return new this.constructor(this.account, this.type, callback);
  };

  Fact_Model.collectionname = Fact_Model.prototype.collectionname = function(type) {
    if (type == null) {
      type = this.type;
    }
    return 'facts_' + type.replace(/[^a-z0-9_]+/g, '_').substring(0, 60);
  };

  Fact_Model.route = function(req, res, next) {
    if (req.params['fact-type']) {
      return new Fact_Model(req.account, req.params['fact-type'], function() {
        req.model = this;
        return next();
      });
    } else {
      return next();
    }
  };

  Fact_Model.prototype.removeFull = function(callback) {
    return this.table.drop(callback);
  };

  Fact_Model.prototype.load = function(query, shim, callback) {
    var args;
    args = Array.prototype.slice.call(arguments, 1);
    callback = args.pop();
    shim = args.pop() || false;
    return Fact_Model.__super__.load.call(this, query, function() {
      return this.addShim(callback);
    });
  };

  Fact_Model.prototype.loadAll = function(query, shim, callback) {
    var args,
      _this = this;
    args = Array.prototype.slice.call(arguments, 1);
    callback = args.pop();
    shim = args.pop() || false;
    return this.table.find(query, {
      _id: 1
    }).toArray(function(err, ids) {
      var loader;
      loader = function(row, next) {
        return _this._spawn(function() {
          return this.load({
            _id: row._id
          }, shim, next);
        });
      };
      return async.map(ids, loader, callback);
    });
  };

  Fact_Model.getTypes = function(account, callback) {
    return mongodb.open(account.dbname(), function(err, db) {
      return db.collectionNames(function(err, collections) {
        var coll, len, result;
        len = db.databaseName.length + 1;
        result = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = collections.length; _i < _len; _i++) {
            coll = collections[_i];
            if ('facts_' === coll.name.substring(len, len + 5)) {
              _results.push(coll.name.slice(len + 5));
            }
          }
          return _results;
        })();
        result.detailed = function(callback) {
          var iter;
          iter = function(type, next) {
            return new Fact_Model(account, type, function() {
              return this.table.count(function(err, size) {
                return next(err, {
                  fact_type: type,
                  fact_sources: 'todo',
                  count: size,
                  nextPage: "/facts/" + type
                });
              });
            });
          };
          return async.map(result, iter, function(err, info) {
            var fact, obj, _i, _len, _ref;
            obj = {};
            _ref = info || [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              fact = _ref[_i];
              obj[fact.fact_type] = fact;
            }
            return callback(err, obj);
          });
        };
        return callback(err, result);
      });
    });
  };

  Fact_Model.prototype.bindFunctions = function(data) {
    var bind_array, moment, traverse;
    if (data == null) {
      data = this["export"]();
    }
    moment = require('moment');
    traverse = require('traverse');
    bind_array = function(value) {
      var compare, item;
      if (((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = value.length; _i < _len; _i++) {
          item = value[_i];
          if ((item._value != null) && (item._date != null)) {
            _results.push(1);
          }
        }
        return _results;
      })()).length > 0) {
        value.over = function(period, time) {
          var bits, duration, end, seconds, start;
          end = Number(time) || new Date().getTime();
          if (bits = period.match(/^([0-9]+) (second|minute|hour|day|week|month|year)/)) {
            duration = moment.duration(Number(bits[1]), bits[2]);
            start = end - duration;
            if (0 === duration.as('milliseconds')) {
              throw 'Invocation of Array.over with invalid duration string.';
            }
          } else if (seconds = Number(period)) {
            start = end - seconds;
          } else {
            throw 'Invocation of Array.over with invalid duration value.';
          }
          return this.betweenDates(start, end);
        };
        value.before = function(time) {
          return this.betweenDates(0, time);
        };
        value.after = function(time) {
          return this.betweenDates(time, new Date);
        };
        value.betweenDates = function(start, end) {
          return bind_array(this.filter(function(item) {
            var _ref;
            return (new Date(start) <= (_ref = new Date(item._date || new Date())) && _ref <= new Date(end));
          }));
        };
      }
      value.values = function(column) {
        return bind_array(this.filter(function(v) {
          return typeof v !== 'function';
        }).map(function(v) {
          var _ref;
          v = (_ref = v._value) != null ? _ref : v;
          return column && v[column] || v;
        }));
      };
      value.sum = function(column) {
        return this.values(column).reduce((function(pv, cv) {
          return pv + (cv | 0);
        }), 0);
      };
      value.max = function(column) {
        return this.values(column).reduce((function(pv, item) {
          return Math.max(pv, item | 0);
        }), Math.max());
      };
      value.min = function(column) {
        return this.values(column).reduce((function(pv, item) {
          return Math.min(pv, item | 0);
        }), Math.min());
      };
      value.mean = function(column) {
        return this.sum(column) / this.values(column).length;
      };
      compare = function(column, val, fn) {
        var args;
        args = Array.prototype.slice.call(arguments);
        fn = args.pop();
        val = args.pop();
        column = args.pop();
        return this.values(column).filter(function(v) {
          return fn(val, v);
        });
      };
      value.gt = function(column, val) {
        return compare.call(this, column, val, function(val, v) {
          return v > val;
        });
      };
      value.gte = function(column, val) {
        return compare.call(this, column, val, function(val, v) {
          return v >= val;
        });
      };
      value.lt = function(column, val) {
        return compare.call(this, column, val, function(val, v) {
          return v < val;
        });
      };
      value.lte = function(column, val) {
        return compare.call(this, column, val, function(val, v) {
          return v <= val;
        });
      };
      return value;
    };
    traverse(data).forEach(function(value) {
      var type;
      type = Object.prototype.toString.call(value).slice(8, -1);
      if (type === 'Array') {
        return this.update(bind_array(value));
      }
    });
    return data;
  };

  Fact_Model.prototype.addShim = function(callback) {
    var cache, loadFK, table, type, _settings,
      _this = this;
    table = this.table;
    type = this.type;
    loadFK = function(properties, callback) {
      return InfoMapping_Model.parseObject(properties.query, {
        fact: _this.data
      }, function(query) {
        return new Fact_Model(_this.account, properties.fact_type, function() {
          if ((query._id != null) || properties.has === 'one') {
            return this.load(query, true, callback);
          } else {
            return this.loadAll(query, true, callback);
          }
        });
      });
    };
    cache = require('shared-cache');
    _settings = cache.create('fact-settings-' + this.account.data._id, true, function(key, next) {
      return _this.db.collection('fact_settings').find().toArray(next);
    });
    return _settings.get(function(err, allSettings) {
      var set, settings;
      settings = ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = allSettings.length; _i < _len; _i++) {
          set = allSettings[_i];
          if (set._id === type) {
            _results.push(set);
          }
        }
        return _results;
      })()).pop() || {
        foreign_keys: []
      };
      _this.bindFunctions(_this.data);
      _this.data.getSettings = function() {
        return settings;
      };
      _this.data.get = function() {
        var args, callback, i, iter, result, _i,
          _this = this;
        args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), callback = arguments[_i++];
        result = this;
        args = [].concat.apply([], args.map(function(arg) {
          return arg.split(/[\.\/]/);
        }));
        i = 0;
        iter = function(arg, next) {
          var extract, ii;
          i++;
          extract = function(obj, cb) {
            var k, v;
            if (typeof obj === 'function') {
              return obj(cb);
            }
            return cb(null, (function() {
              var _ref, _results;
              _ref = obj || {};
              _results = [];
              for (k in _ref) {
                v = _ref[k];
                _results.push(v);
              }
              return _results;
            })());
          };
          if (arg === '*') {
            return extract(result, function(err, res) {
              return next(null, result = res);
            });
          } else if (result[arg] != null) {
            if (typeof result[arg] === 'function') {
              return result[arg](function(err, res) {
                return next(null, result = res);
              });
            }
            return next(null, result = result[arg]);
          } else if (i === 1 && (settings.foreign_keys[arg] != null)) {
            return loadFK.call(_this, settings.foreign_keys[arg], function(err, res) {
              return next(err, result = res);
            });
          } else if (Array.isArray(result)) {
            ii = function(r, n) {
              return extract(r[arg], n);
            };
            return async.map(result, ii, function(err, res) {
              return next(err, result = [].concat.apply([], res));
            });
          }
        };
        return async.eachSeries(args, iter, function(err) {
          return callback(err, result);
        });
      };
      return callback(null, _this.data);
    });
  };

  return Fact_Model;

})(Model);
