// Generated by CoffeeScript 1.6.3
var Fact_Model, Model, async,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

async = require('async');

Model = require('./model');

module.exports = Fact_Model = (function(_super) {
  __extends(Fact_Model, _super);

  function Fact_Model(account, type, callback) {
    this.account = account;
    this.type = type;
    this.type = type.replace(/[^a-z0-9_]+/g, '_').substring(0, 60);
    Fact_Model.__super__.constructor.call(this, account.dbname(), this.collectionname(), function(self, db, coll) {
      return callback.apply(this, arguments);
    });
  }

  Fact_Model.prototype._spawn = function(callback) {
    return new this.constructor(this.account, this.type, callback);
  };

  Fact_Model.collectionname = Fact_Model.prototype.collectionname = function(type) {
    if (type == null) {
      type = this.type;
    }
    return 'facts_' + type.replace(/[^a-z0-9_]+/g, '_').substring(0, 60);
  };

  Fact_Model.route = function(req, res, next) {
    if (req.params['fact-type']) {
      return new Fact_Model(req.account, req.params['fact-type'], function() {
        req.model = this;
        return next();
      });
    } else {
      return next();
    }
  };

  Fact_Model.prototype.removeFull = function(callback) {
    return this.table.drop(callback);
  };

  Fact_Model.getTypes = function(account, callback) {
    return mongodb.open(account.dbname(), function(err, db) {
      return db.collectionNames(function(err, collections) {
        var coll, len, result;
        len = db.databaseName.length + 1;
        result = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = collections.length; _i < _len; _i++) {
            coll = collections[_i];
            if ('facts_' === coll.name.substring(len, len + 5)) {
              _results.push(coll.name.slice(len + 5));
            }
          }
          return _results;
        })();
        result.detailed = function(callback) {
          var iter;
          iter = function(type, next) {
            return new Fact_Model(account, type, function() {
              return this.table.count(function(err, size) {
                return next(err, {
                  fact_type: type,
                  fact_sources: 'todo',
                  count: size,
                  nextPage: "/facts/" + type
                });
              });
            });
          };
          return async.map(result, iter, function(err, info) {
            var fact, obj, _i, _len, _ref;
            obj = {};
            _ref = info || [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              fact = _ref[_i];
              obj[fact.fact_type] = fact;
            }
            return callback(err, obj);
          });
        };
        return callback(err, result);
      });
    });
  };

  Fact_Model.prototype.bindFunctions = function(data) {
    var bind_array, moment;
    if (data == null) {
      data = this["export"]();
    }
    moment = require('moment');
    bind_array = function(value) {
      var item;
      if (((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = value.length; _i < _len; _i++) {
          item = value[_i];
          if ((item._value != null) && (item._date != null)) {
            _results.push(1);
          }
        }
        return _results;
      })()).length > 0) {
        value.over = function(period, time) {
          var bits, duration, end, seconds, start;
          end = Number(time) || new Date().getTime();
          if (bits = period.match(/^([0-9]+) (second|minute|hour|day|week|month|year)/)) {
            duration = moment.duration(Number(bits[1]), bits[2]);
            start = end - duration;
            if (0 === duration.as('milliseconds')) {
              throw 'Invocation of Array.over with invalid duration string.';
            }
          } else if (seconds = Number(period)) {
            start = end - seconds;
          } else {
            throw 'Invocation of Array.over with invalid duration value.';
          }
          return this.betweenDates(start, end);
        };
        value.before = function(time) {
          return this.betweenDates(0, time);
        };
        value.after = function(time) {
          return this.betweenDates(time, new Date);
        };
        value.betweenDates = function(start, end) {
          return bind_array(this.filter(function(item) {
            var _ref;
            return (new Date(start) <= (_ref = new Date(item._date || new Date())) && _ref <= new Date(end));
          }));
        };
      }
      value.values = function() {
        return this.filter(function(v) {
          return typeof v !== 'function';
        }).map(function(v) {
          var _ref;
          return (_ref = v._value) != null ? _ref : v;
        });
      };
      value.sum = function() {
        return this.values().reduce((function(pv, cv) {
          return pv + (cv | 0);
        }), 0);
      };
      value.max = function() {
        return this.values().reduce((function(pv, item) {
          return Math.max(pv, item | 0);
        }), Math.max());
      };
      value.min = function() {
        return this.reduce((function(pv, item) {
          return Math.min(pv, item | 0);
        }), Math.min());
      };
      value.mean = function() {
        return this.sum() / this.values().length;
      };
      value.gt = function(val) {
        return this.values().filter(function(v) {
          return v > val;
        });
      };
      value.gte = function(val) {
        return this.values().filter(function(v) {
          return v >= val;
        });
      };
      value.lt = function(val) {
        return this.values().filter(function(v) {
          return v < val;
        });
      };
      value.lte = function(val) {
        return this.values().filter(function(v) {
          return v <= val;
        });
      };
      return value;
    };
    return JSON.parse(JSON.stringify(data), function(key, value) {
      var type;
      type = Object.prototype.toString.call(value).slice(8, -1);
      if (type === 'Array') {
        value = bind_array(value);
      }
      return value;
    });
  };

  return Fact_Model;

})(Model);
