// Generated by CoffeeScript 1.6.3
var Cache, Hook_Model, Model, async, crypto,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

async = require('async');

crypto = require('crypto');

Model = require('./model');

Cache = require('shared-cache');

module.exports = Hook_Model = (function(_super) {
  __extends(Hook_Model, _super);

  function Hook_Model(account, callback) {
    this.account = account;
    Hook_Model.__super__.constructor.call(this, account.dbname(), 'hooks', callback);
  }

  Hook_Model.prototype._spawn = function(callback) {
    return new this.constructor(this.account, callback);
  };

  Hook_Model.route = function(req, res, next) {
    return new Hook_Model(req.account, function() {
      req.model = this;
      return next();
    });
  };

  Hook_Model.prototype.setup = function() {
    return this.table.ensureIndex({
      hook_id: 1,
      fact_type: 1
    }, {
      unique: true
    }, function() {
      return null;
    });
  };

  Hook_Model.prototype.validate = function(data, callback) {
    if (!data.url) {
      return callback('A hook should have a URL property.');
    }
    if (data.handshake && typeof data.handshake !== 'string') {
      return callback('A hook\'s handshake property must be a string');
    }
    return callback();
  };

  Hook_Model.prototype.save = function() {
    var _this = this;
    Cache.create('hooks-' + this.account.data._id, false, function(key, next) {
      return _this.table.find().toArray(next);
    }).stale();
    return Hook_Model.__super__.save.apply(this, arguments);
  };

  Hook_Model.prototype["export"] = function() {
    return {
      hook_id: this.data.hook_id,
      fact_type: this.data.fact_type,
      url: this.data.url,
      handshake: this.data.handshake
    };
  };

  Hook_Model.prototype.setup = function() {
    var path;
    path = require('path');
    return this.db.addStreamOperation({
      _id: 'hook_sender',
      type: 'untracked',
      operations: [
        {
          modular: true,
          operation: path.resolve(__dirname, '../../opstreams/hook_sender')
        }
      ],
      sourceCollection: 'hooks_pending',
      targetCollection: 'hooks_sent'
    });
  };

  return Hook_Model;

})(Model);
