// Generated by CoffeeScript 1.6.3
var Cache, FactSettings_Model, Model, check, crypto,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

check = require('validator').check;

crypto = require('crypto');

Model = require('./model');

Cache = require('shared-cache');

module.exports = FactSettings_Model = (function(_super) {
  __extends(FactSettings_Model, _super);

  function FactSettings_Model(account, callback) {
    this.account = account;
    FactSettings_Model.__super__.constructor.call(this, account.dbname(), 'fact_settings', callback);
  }

  FactSettings_Model.prototype._spawn = function(callback) {
    return new this.constructor(this.account, callback);
  };

  FactSettings_Model.route = function(req, res, next) {
    return new FactSettings_Model(req.account, function() {
      req.model = this;
      return next();
    });
  };

  FactSettings_Model.prototype.validate = function(data, callback) {
    var field, mode, modes, _ref;
    modes = ['all', 'newest', 'oldest', 'max', 'min'];
    _ref = data.field_modes;
    for (field in _ref) {
      mode = _ref[field];
      if (__indexOf.call(modes, mode) < 0) {
        return callback('Field mode must be one of (' + modes.join(', ') + ')');
      }
    }
    this.data.primary_key = data.primary_key != null ? data.primary_key : data.primary_key = ['_id'];
    if (!Array.isArray(data.primary_key) || data.primary_key.length === 0) {
      return callback('The primary_key field must be an array of one or more field names');
    }
    return callback();
  };

  FactSettings_Model.prototype["export"] = function() {
    return {
      fact_type: this.data._id,
      field_modes: this.data.field_modes,
      primary_key: this.data.primary_key
    };
  };

  return FactSettings_Model;

})(Model);
