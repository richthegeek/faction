// Generated by CoffeeScript 1.6.3
(function() {
  var Cache, FactSettings_Model, Model, crypto,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  crypto = require('crypto');

  Model = require('./model');

  Cache = require('shared-cache');

  module.exports = FactSettings_Model = (function(_super) {
    __extends(FactSettings_Model, _super);

    function FactSettings_Model(account, callback) {
      this.account = account;
      FactSettings_Model.__super__.constructor.call(this, account.dbname(), 'fact_settings', callback);
    }

    FactSettings_Model.prototype._spawn = function(callback) {
      return new this.constructor(this.account, callback);
    };

    FactSettings_Model.route = function(req, res, next) {
      return new FactSettings_Model(req.account, function() {
        req.model = this;
        return next();
      });
    };

    FactSettings_Model.prototype.validate = function(data, callback) {
      var field, k, key, mode, modes, props, _ref, _ref1;
      modes = ['all', 'newest', 'oldest', 'max', 'min'];
      _ref = data.field_modes;
      for (field in _ref) {
        mode = _ref[field];
        if (typeof mode === 'object') {
          if (mode.mode == null) {
            mode.mode = 'newest';
          }
          mode = mode.mode;
          data.field_modes[field].mode = mode;
        }
        if (__indexOf.call(modes, mode) < 0) {
          return callback('Field mode must be one of (' + modes.join(', ') + ')');
        }
      }
      this.data.foreign_keys = data.foreign_keys != null ? data.foreign_keys : data.foreign_keys = {};
      _ref1 = data.foreign_keys;
      for (key in _ref1) {
        props = _ref1[key];
        if (key.match(/[^a-z0-9_]/i)) {
          return callback('Foreign keys names may only contain A-Z, a-z, 0-9, and _');
        }
        if (!props.fact_type || !props.query) {
          return callback('Foreign keys must have a fact_type and query property.');
        }
        if (props.query.toString() !== '[object Object]' || ((function() {
          var _results;
          _results = [];
          for (k in props.query) {
            _results.push(k);
          }
          return _results;
        })()).length === 0) {
          return callback('Foreign key query must be a non-empty object.');
        }
      }
      return callback();
    };

    FactSettings_Model.prototype["export"] = function() {
      return {
        fact_type: this.data._id,
        foreign_keys: this.data.foreign_keys,
        field_modes: this.data.field_modes,
        primary_key: this.data.primary_key
      };
    };

    return FactSettings_Model;

  })(Model);

}).call(this);

/*
//@ sourceMappingURL=factsettings.map
*/
