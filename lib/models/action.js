// Generated by CoffeeScript 1.6.3
var Action_Model, Model, async,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

async = require('async');

Model = require('./model');

module.exports = Action_Model = (function(_super) {
  __extends(Action_Model, _super);

  function Action_Model(account, callback) {
    this.account = account;
    Action_Model.__super__.constructor.call(this, account.dbname(), 'actions', function(self, db, coll) {
      return callback.apply(this, arguments);
    });
  }

  Action_Model.prototype._spawn = function(callback) {
    return new this.constructor(this.account, callback);
  };

  Action_Model.route = function(req, res, next) {
    return new Action_Model(req.account, function() {
      req.model = this;
      return next();
    });
  };

  Action_Model.prototype.validate = function(data) {
    var action, _i, _len, _ref, _results;
    if (!data.conditions) {
      throw 'An action must have a map of conditions determining wether it is run.';
    }
    if (data.perform_once_per_fact == null) {
      data.perform_once_per_fact = false;
    }
    if (!Array.isArray(data.actions) || data.actions.length === 0) {
      throw 'An action must have an array of at least 1 action to perform.';
    }
    _ref = data.actions;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      action = _ref[_i];
      if (!action || !action.action) {
        throw 'All actions must be an object with an "action" property.';
      }
    }
    return _results;
  };

  Action_Model.prototype["export"] = function() {
    var data;
    data = Action_Model.__super__["export"].apply(this, arguments);
    return {
      action_id: data.action_id,
      fact_type: data.fact_type,
      actions: data.actions,
      conditions: data.conditions,
      perform_once_per_fact: !!data.perform_once_per_fact
    };
  };

  Action_Model.prototype.fact_is_runnable = function(factObj) {
    var condition, data, fact, val, _ref;
    data = this["export"]();
    fact = factObj["export"]();
    _ref = data.conditions;
    for (condition in _ref) {
      val = _ref[condition];
      if (fact._conditions[condition] !== val) {
        return false;
      }
    }
    return true;
  };

  Action_Model.prototype.fact_run = function(factObj, callback) {
    return callback(null, 42);
  };

  return Action_Model;

})(Model);
