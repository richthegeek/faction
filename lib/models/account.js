// Generated by CoffeeScript 1.6.3
(function() {
  var Account_Model, Model, check, crypto,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  check = require('validator').check;

  crypto = require('crypto');

  Model = require('./model');

  module.exports = Account_Model = (function(_super) {
    __extends(Account_Model, _super);

    function Account_Model(callback) {
      Account_Model.__super__.constructor.call(this, 'faction', 'accounts', callback);
    }

    Account_Model.prototype._spawn = function(callback) {
      return new this.constructor(callback);
    };

    Account_Model.prototype.dbname = function() {
      return 'faction_account_' + this.data._id;
    };

    Account_Model.route = function(req, res, next) {
      return new Account_Model(function() {
        req.model = this;
        return next();
      });
    };

    Account_Model.prototype.setup = function() {
      new Info_Model(this, function() {
        return this.setup();
      });
      new Infomapping_Model(this, function() {
        return this.setup();
      });
      new Condition_Model(this, function() {
        return this.setup();
      });
      return new Action_Model(this, function() {
        return this.setup();
      });
    };

    Account_Model.prototype.create = function(info, callback) {
      var base,
        _this = this;
      if (typeof info === 'function') {
        callback = info;
        info = {};
      }
      this.data = {};
      base = new Date().getTime().toString() + Math.round(1000 * Math.random());
      this.data._id = crypto.createHash('sha1').update(base).digest('hex').substring(0, 16);
      return this.setContact(info, function(err) {
        if (err) {
          return callback(err);
        }
        return _this.generateKey('primary', {
          parent: null,
          endpoints: ['.*'],
          secure: true
        }, function(e, a, b) {
          _this.setup();
          return callback(e, a, b);
        });
      });
    };

    Account_Model.prototype.setContact = function(info, callback) {
      var k, v, _base;
      info = info.contact || info;
      if ((_base = this.data).contact == null) {
        _base.contact = {};
      }
      for (k in info) {
        v = info[k];
        if (v) {
          this.data.contact[k] = v;
        }
      }
      return this.save(callback);
    };

    Account_Model.prototype.validate = function(data, callback) {
      if (data.contact == null) {
        data.contact = {};
      }
      if (!data.contact.name) {
        return callback('Contact name (body property: "name") must be non-empty');
      }
      if (!data.contact.email) {
        return callback('Contact email (body property: "email") must be valid');
      }
      if (!data.contact.email.match(/^[a-z0-9_.+-]+@[a-z0-9-]+\.[a-z0-9-.]+$/i)) {
        return callback('Contact email must be valid.');
      }
      return callback();
    };

    Account_Model.prototype.generateKey = function(name, options, callback) {
      var endpoints, parent, reg, regex, secure, _base, _i, _len, _ref, _ref1, _ref2,
        _this = this;
      if ((_base = this.data).keys == null) {
        _base.keys = {};
      }
      parent = (_ref = options.parent) != null ? _ref : null;
      endpoints = (_ref1 = options.endpoints) != null ? _ref1 : ['.*'];
      secure = (_ref2 = options.secure) != null ? _ref2 : true;
      if (parent && (this.data.keys[parent] == null)) {
        return callback('The specified parent does not exist.');
      }
      for (_i = 0, _len = endpoints.length; _i < _len; _i++) {
        regex = endpoints[_i];
        reg = new RegExp(regex);
      }
      this.data.keys[name] = {
        name: name,
        parent: parent,
        "public": this.data._id + crypto.createHash('sha1').update(Math.random() + +new Date() + 'public').digest('hex').substring(0, 16),
        "private": crypto.createHash('sha512').update(Math.random() + +new Date() + 'private').digest('hex'),
        endpoints: endpoints,
        secure: !!secure
      };
      return this.save(function(err) {
        return callback(err, _this.data.keys[name]);
      });
    };

    Account_Model.prototype.deleteKey = function(name, callback) {
      var k, key, keys, _i, _len;
      keys = this.getChildKeys(name);
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        delete this.data.keys[key.name];
      }
      if (((function() {
        var _results;
        _results = [];
        for (k in this.data.keys) {
          if (k) {
            _results.push(1);
          }
        }
        return _results;
      }).call(this)).length === 0) {
        throw 'Deleting this key would result in this account having no keys. Aborting!';
      }
      return this.save(function(err) {
        return callback(err, keys);
      });
    };

    Account_Model.prototype.getChildKeys = function(parent, andSelf, limit) {
      var children, key, name, _ref;
      if (andSelf == null) {
        andSelf = true;
      }
      if (limit == null) {
        limit = 100;
      }
      if (limit === 0) {
        return [];
      }
      children = [];
      if (andSelf) {
        children.push(this.data.keys[parent]);
      }
      _ref = this.data.keys;
      for (name in _ref) {
        key = _ref[name];
        if (key.parent === parent) {
          children = children.concat(this.getChildKeys(key.name, true, limit - 1));
        }
      }
      return children;
    };

    Account_Model.prototype["export"] = function(key) {
      var data, keys, _i, _len;
      data = Account_Model.__super__["export"].apply(this, arguments);
      if (key) {
        keys = this.getChildKeys(key.name);
        data.keys = {};
        for (_i = 0, _len = keys.length; _i < _len; _i++) {
          key = keys[_i];
          data.keys[key.name] = key;
        }
      }
      return data;
    };

    return Account_Model;

  })(Model);

}).call(this);
