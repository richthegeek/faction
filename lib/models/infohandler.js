// Generated by CoffeeScript 1.6.3
var Cache, InfoHandler_Model, Model, check, crypto,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

check = require('validator').check;

crypto = require('crypto');

Model = require('./model');

Cache = require('shared-cache');

module.exports = InfoHandler_Model = (function(_super) {
  __extends(InfoHandler_Model, _super);

  function InfoHandler_Model(account, callback) {
    this.account = account;
    InfoHandler_Model.__super__.constructor.call(this, account.dbname(), 'info_handlers', callback);
  }

  InfoHandler_Model.prototype._spawn = function(callback) {
    return new this.constructor(this.account, callback);
  };

  InfoHandler_Model.route = function(req, res, next) {
    return new InfoHandler_Model(req.account, function() {
      req.model = this;
      return next();
    });
  };

  InfoHandler_Model.prototype.setup = function() {
    this.table.ensureIndex({
      handler_id: 1,
      info_type: 1
    }, {
      unique: true
    }, function() {
      return null;
    });
    return this.table.ensureIndex({
      fact_type: 1
    }, {}, function() {
      return null;
    });
  };

  InfoHandler_Model.prototype.validate = function(data) {
    check(data.fact_type, {
      notEmpty: 'An information-handler should have a fact_type property'
    }).notEmpty();
    check(data.fact_identifier, {
      notEmpty: 'An information-handler should have a fact_identifier property'
    }).notEmpty();
    if (!data.track || typeof data.track !== 'object') {
      throw 'An information-handler should have a track property defining how data is applied to facts.';
    }
    if (!data.handler_id) {
      throw 'An information-handler must have an ID defined. (This error should not be seen)';
    }
  };

  InfoHandler_Model.prototype.save = function() {
    var _this = this;
    Cache.create('info-handlers-' + this.account.data._id, false, function(key, next) {
      return _this.table.find().toArray(next);
    }).stale();
    return InfoHandler_Model.__super__.save.apply(this, arguments);
  };

  InfoHandler_Model.prototype["export"] = function() {
    return {
      handler_id: this.data.handler_id,
      fact_type: this.data.fact_type,
      fact_identifier: this.data.fact_identifier,
      track: this.data.track
    };
  };

  return InfoHandler_Model;

})(Model);
