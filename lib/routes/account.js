// Generated by CoffeeScript 1.6.3
module.exports = function(server) {
  server.post({
    path: '/account',
    auth: false
  }, function(req, res, next) {
    return new Account_Model(function(account) {
      return account.create(req.body, function(err) {
        return res.send({
          status: 'ok',
          statusText: 'The account has been created',
          account: account["export"]()
        });
      });
    });
  });
  server.get('/account', function(req, res, next) {
    return res.send(req.account["export"](req.key));
  });
  server.post('/account/contact', function(req, res, next) {
    return req.account.setContact(req.body, function(err) {
      return res.send({
        status: 'ok',
        statusText: 'The account contact information was updated.',
        account: req.account["export"](req.key)
      });
    });
  });
  server.post('/account/key/:key-name', function(req, res, next) {
    var _base;
    if ((_base = req.params).parent == null) {
      _base.parent = req.key.name;
    }
    return req.account.generateKey(req.params['key-name'], req.params.parent, function(err, key) {
      return res.send({
        status: 'ok',
        statusText: 'A new key with that key-name has been generated.',
        key: key
      });
    });
  });
  return server.del('/account/key/:key-name', function(req, res, next) {
    var children, key, _i, _len;
    children = req.account.getChildKeys(req.key.name);
    for (_i = 0, _len = children.length; _i < _len; _i++) {
      key = children[_i];
      if (key.name === req.params['key-name']) {
        return req.account.deleteKey(req.params['key-name'], function(err, removed) {
          return res.send({
            status: 'ok',
            statusText: 'The key and its children were removed',
            keys: (function() {
              var _j, _len1, _results;
              _results = [];
              for (_j = 0, _len1 = removed.length; _j < _len1; _j++) {
                key = removed[_j];
                _results.push(key.name);
              }
              return _results;
            })()
          });
        });
      }
    }
    throw 'The named key could not be deleted - either it does not exist or is not a child of the authorised key.';
  });
};
