// Generated by CoffeeScript 1.6.3
module.exports = function(server) {
  server.post({
    path: '/account',
    auth: false
  }, Account_Model.route, function(req, res, next) {
    return req.model.create(req.body, ErrorHandler(next, function() {
      return res.send({
        status: 'ok',
        statusText: 'The account has been created',
        account: req.model["export"]()
      });
    }));
  });
  server.post('/account/setup', function(req, res, next) {
    req.account.setup();
    return next(res.send({
      status: 'ok',
      statusText: 'You know what you did.'
    }));
  });
  server.get('/account', function(req, res, next) {
    if (!req.account) {
      return next(res.notFound('account'));
    }
    return next(res.send(req.account["export"](req.key)));
  });
  server.post('/account/contact', function(req, res, next) {
    return req.account.setContact(req.body, ErrorHandler(next, function() {
      return res.send({
        status: 'ok',
        statusText: 'The account contact information was updated.',
        account: req.account["export"](req.key)
      });
    }));
  });
  server.post('/account/key/:key-name', function(req, res, next) {
    var children, endpoints, i, key, keyname, parent, reg, regex, updated, _base, _i, _j, _len, _len1, _ref, _ref1;
    keyname = req.params['key-name'];
    if ((_base = req.body).parent == null) {
      _base.parent = ((_ref = req.account.data.keys[keyname]) != null ? _ref.parent : void 0) || req.key.name;
    }
    if ((req.account.data.keys[keyname] != null) && (req.body.refresh == null)) {
      if (parent = req.body.parent) {
        children = req.account.getChildKeys(req.key.name);
        for (_i = 0, _len = children.length; _i < _len; _i++) {
          key = children[_i];
          if (!(key.name === parent)) {
            continue;
          }
          updated = true;
          req.account.data.keys[keyname].parent = parent;
        }
      }
      if (endpoints = req.body.endpoints) {
        for (i in endpoints) {
          regex = endpoints[i];
          endpoints[i] = regex = regex.replace(/\//g, '\\/');
          reg = new RegExp(regex);
        }
        children = req.account.getChildKeys(req.key.name, false);
        for (_j = 0, _len1 = children.length; _j < _len1; _j++) {
          key = children[_j];
          if (!(key.name === keyname)) {
            continue;
          }
          updated = true;
          req.account.data.keys[keyname].endpoints = endpoints;
        }
      }
      req.account.data.keys[keyname].secure = !!((_ref1 = req.body.secure) != null ? _ref1 : true);
      return req.account.save(ErrorHandler(next, function(err) {
        return res.send({
          status: 'ok',
          statusText: 'The key was updated.',
          key: req.account.data.keys[keyname]
        });
      }));
    } else {
      return req.account.generateKey(keyname, req.body, ErrorHandler(next, function(err, key) {
        return res.send({
          status: 'ok',
          statusText: 'A new key with that key-name has been generated.',
          key: key
        });
      }));
    }
  });
  return server.del('/account/key/:key-name', function(req, res, next) {
    var children, key, _i, _len;
    children = req.account.getChildKeys(req.key.name);
    for (_i = 0, _len = children.length; _i < _len; _i++) {
      key = children[_i];
      if (key.name === req.params['key-name']) {
        return req.account.deleteKey(req.params['key-name'], ErrorHandler(next, function(err, removed) {
          return res.send({
            status: 'ok',
            statusText: 'The key and its children were removed',
            keys: (function() {
              var _j, _len1, _results;
              _results = [];
              for (_j = 0, _len1 = removed.length; _j < _len1; _j++) {
                key = removed[_j];
                _results.push(key.name);
              }
              return _results;
            })()
          });
        }));
      }
    }
    return next('The named key could not be deleted - either it does not exist or is not a child of the authorised key.');
  });
};
