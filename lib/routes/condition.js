// Generated by CoffeeScript 1.6.3
module.exports = function(server) {
  server.get('/conditions', Condition_Model.route, function(req, res, next) {
    return req.model.loadPaginated({}, req, ErrorHandler(next, function(err, response) {
      return res.send(response);
    }));
  });
  server.get('/conditions/:fact-type', Condition_Model.route, function(req, res, next) {
    return req.model.loadPaginated(req.params.asQuery(), req, ErrorHandler(next, function(err, response) {
      return res.send(response);
    }));
  });
  server.get('/conditions/:fact-type/:condition-id', Condition_Model.route, function(req, res, next) {
    return req.model.load(req.params.asQuery(), function() {
      return res.send(this["export"]());
    });
  });
  server.post('/conditions/:fact-type/:condition-id', Condition_Model.route, function(req, res, next) {
    delete req.body._id;
    req.body.fact_type = req.params['fact-type'];
    req.body.condition_id = req.params['condition-id'];
    return req.model.update(req.params.asQuery(), req.body, ErrorHandler(next, function(err, updated) {
      return res.send({
        status: 'ok',
        statusText: 'The condition was ' + (updated && 'updated.' || 'created.'),
        condition: this["export"]()
      });
    }));
  });
  server.del('/conditions/:fact-type/:condition-id', Condition_Model.route, function(req, res, next) {
    return req.model.load(req.params.asQuery(), ErrorHandler(next, function(err, found) {
      if (found) {
        this.remove();
        return res.send({
          status: "ok",
          statusText: "The condition was removed."
        });
      } else {
        return res.send(404, {
          status: "warning",
          statusText: "No such condition exists, so it was not removed."
        });
      }
    }));
  });
  return server.get('/conditions/:fact-type/:condition-id/test/:fact-id', Condition_Model.route, function(req, res, next) {
    return req.model.load(req.params.asQuery('fact-type', 'condition-id'), function(err) {
      var condition;
      condition = this;
      return new Fact_Model(req.account, condition.data.fact_type, function() {
        return this.load({
          _id: req.params['fact-id']
        }, ErrorHandler(next, function(err) {
          var bound, catcher, code, fact, sandbox;
          fact = this;
          bound = fact.bindFunctions();
          catcher = {
            log: function() {
              return logged.push('log', arguments);
            },
            error: function() {
              return logged.push('error', arguments);
            },
            info: function() {
              return logged.push('info', arguments);
            },
            warn: function() {
              return logged.push('warn', arguments);
            }
          };
          code = "full = true;\ncondition.resultBreakdown = condition.conditions.map(function(condition) {\n	try {\n		res = eval(condition);\n		full = full && res;\n		return res;\n	} catch(e) {\n		console.error(e);\n		full = false;\n		return false;\n	}\n});\ncondition.result = full;";
          sandbox = {
            fact: bound,
            condition: condition["export"](),
            console: console
          };
          require('contextify')(sandbox);
          sandbox.run(code);
          console.log(sandbox.condition);
          return res.send({
            condition: condition,
            fact: fact,
            result: sandbox.condition.result,
            result_breakdown: sandbox.condition.resultBreakdown
          });
        }));
      });
    });
  });
};
