// Generated by CoffeeScript 1.6.3
module.exports = function(server) {
  var action_exec;
  server.get('/action-types', Action_Model.route, function(req, res, next) {
    return req.model.actionTypes(function(err, types) {
      return res.send(types);
    });
  });
  server.get('/actions', Action_Model.route, function(req, res, next) {
    return req.model.loadPaginated({}, req, function(err, response) {
      if (err) {
        throw err;
      }
      return res.send(response);
    });
  });
  server.get('/actions/:fact-type', Action_Model.route, function(req, res, next) {
    return req.model.loadPaginated(req.params.asQuery(), req, function(err, response) {
      if (err) {
        throw err;
      }
      return res.send(response);
    });
  });
  server.get('/actions/:fact-type/:action-id', Action_Model.route, function(req, res, next) {
    return req.model.load(req.params.asQuery(), function(err, found) {
      if (err) {
        throw err;
      }
      if (found) {
        return res.send(this["export"]());
      } else {
        return res.notFound('action');
      }
    });
  });
  server.post('/actions/:fact-type/:action-id', Action_Model.route, function(req, res, next) {
    req.body.action_id = req.params['action-id'];
    req.body.fact_type = req.params['fact-type'];
    return req.model.update(req.params.asQuery(), req.body, function(err, updated) {
      if (err) {
        return req["throw"](err);
      }
      return res.send({
        status: 'ok',
        statusText: 'The action was ' + (updated && 'updated.' || 'created.'),
        action: this["export"]()
      });
    });
  });
  server.get('/actions/:fact-type/:action-id/test/:fact-id', Action_Model.route, function(req, res, next) {
    return req.model.load(req.params.asQuery('fact-type', 'action-id'), function(err, found) {
      var action;
      if (err) {
        throw err;
      }
      if (!found) {
        return res.notFound('action');
      }
      action = this;
      return new Fact_Model(req.account, action.data.fact_type, function(err) {
        return this.load({
          _id: req.params['fact-id']
        }, function(err, found) {
          var fact;
          if (err) {
            throw err;
          }
          if (!found) {
            return res.notFound('fact');
          }
          fact = this;
          if (req.query.force || action.fact_is_runnable(fact)) {
            return action.fact_run(fact, function(err, results) {
              return res.send({
                status: 'ok',
                statusText: 'The action was run using this fact.',
                action: action,
                fact: fact,
                result: results,
                forced: req.query.force
              });
            });
          } else {
            return res.send({
              status: 'ok',
              statusText: 'The action was not run because the fact did not pass the conditions.',
              action: action,
              fact: fact,
              result: false
            });
          }
        });
      });
    });
  });
  action_exec = function(req, res, next) {
    var _base;
    if ((_base = req.params).stage == null) {
      _base.stage = 0;
    }
    return req.model.load(req.params.asQuery('fact-type', 'action-id'), function(err, found) {
      var action;
      if (err) {
        throw err;
      }
      if (!found) {
        return res.notFound('action');
      }
      action = this;
      return new Fact_Model(req.account, action.data.fact_type, function(err) {
        var fact;
        this.load({
          _id: req.params['fact-id']
        }, function(err, found) {});
        if (err) {
          throw err;
        }
        if (!found) {
          return res.notFound('fact');
        }
        fact = this;
        this.db.collection('fact_evaluated').insert({
          id: fact.id,
          type: action.fact_type,
          result: {},
          time: +(new Date),
          stage: req.params.stage
        });
        return res.send({
          status: 'ok',
          statusText: 'The action was queued to be executed',
          action: action,
          fact: fact
        });
      });
    });
  };
  server.get('/actions/:fact-type/:action-id/exec/:fact-id', Action_Model.route, action_exec);
  server.get('/actions/:fact-type/:action-id/exec/:fact-id/:stage', Action_Model.route, action_exec);
  server.del('/actions/:fact-type/:action-id', Action_Model.route, function(req, res, next) {
    return req.model.load(req.params.asQuery(), function(err, found) {
      if (found) {
        return this.remove(function() {
          return res.send({
            status: "ok",
            statusText: "The action was removed."
          });
        });
      } else {
        return res.send(404, {
          status: "warning",
          statusText: "No such action exists, so it was not removed."
        });
      }
    });
  });
  return server.get('/actions/:fact-type/:action-id/history/:fact-id', Actionresult_Model.route, function(req, res, next) {
    return req.model.loadPaginated(req.params.asQuery(), req, function(err, response) {
      if (err) {
        throw err;
      }
      return res.send(response);
    });
  });
};
