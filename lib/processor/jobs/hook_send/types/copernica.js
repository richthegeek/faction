// Generated by CoffeeScript 1.6.3
(function() {
  var Copernica_Base, Copernica_Profile, Copernica_Subprofile, ISOtoCopernica, actionId, async, collections, downloadFileTypes, error, humanTime, soap, timeNouns, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  async = require('async');

  _ = require('underscore');

  soap = require('soap');

  error = (function() {
    var errorMessages;
    errorMessages = {
      'invalidOptions': 'Invalid options. Options must meet the following conditions:',
      'notInitilaised': 'Client not initilaised. Make sure you run this.init( cb )',
      'notLoggedIn': 'Client not authenticated. Check credentials and reinitialise',
      'noDatabase': 'No database selected. Please use this.selectDb to select one',
      'noId': 'No identifier specified.',
      'emptyFields': 'No fields specified.'
    };
    return function(code, extra) {
      return {
        'code': code,
        'message': errorMessages[code],
        'extraInfo': extra != null ? extra : void 0
      };
    };
  })();

  downloadFileTypes = ['pdf', 'zip'];

  /*
  # Turns into a human readable time. input in seconds
  */


  timeNouns = ['seconds', 'minutes', 'hours', 'days'];

  humanTime = function(x) {
    var index, time;
    time = [];
    time.push(Math.round((x /= 60) % 60));
    time.push(Math.round((x /= 60) % 60));
    time.push(Math.round((x /= 24) % 24));
    time.push(Math.round(x));
    index = time.length;
    while (time[--index] === 0 && index > 1) {
      true;
    }
    return "" + time[index] + " " + timeNouns[index] + ", " + time[index - 1] + " " + timeNouns[index - 1];
  };

  /*
  # Converts an ISO formatted date into Copernica Style
  */


  ISOtoCopernica = function(str) {
    return str.replace('T', ' ').replace('.000Z', '');
  };

  /*
  # Simple hash code of a string
  */


  String.prototype.hashCode = function() {
    var chr, hash, i, _i, _ref;
    hash = 0;
    if (this.length === 0) {
      return hash;
    }
    for (i = _i = 0, _ref = this.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      chr = this.charCodeAt(i);
      hash = ((hash << 5) - hash) + chr;
      hash |= 0;
    }
    return hash;
  };

  /*
  # Creates an ID from an ISO date and a piece of identifying information
  */


  actionId = function(time, identifier) {
    time = ISOtoCopernica(time).replace(':', '').replace(' ', '').replace('-', '');
    identifier = identifier.hashCode();
    return "" + time + "-" + identifier;
  };

  /*
  # Copernica Field Definitions
  # name - Name of the field
  # type - Type of the field
  # value - Default value
  # display - display on overview pages
  # ordered - field order on overview pages
  # length - field length
  # textlines - number of text lines
  # hidden - is field hidden
  #
  # what else? who knows...
  */


  collections = {
    'Visits': {
      'Start_time': {
        'type': 'text',
        'value': '',
        'display': true,
        'ordered': false,
        'length': 50,
        'textlines': 1,
        'hidden': false,
        'index': true
      },
      'Length_of_visit': {
        'type': 'text',
        'value': '',
        'display': true,
        'ordered': false,
        'length': 50,
        'textlines': 1,
        'hidden': false,
        'index': true
      },
      'Number_of_pages_visited': {
        'type': 'text',
        'value': '',
        'display': true,
        'ordered': false,
        'length': 50,
        'textlines': 1,
        'hidden': false,
        'index': true
      },
      'Session_ID': {
        'type': 'text',
        'value': '',
        'display': true,
        'ordered': false,
        'length': 50,
        'textlines': 1,
        'hidden': false,
        'index': true
      }
    },
    'Pages': {
      'Page_title': {
        'type': 'text',
        'value': '',
        'display': true,
        'ordered': false,
        'length': 255,
        'textlines': 1,
        'hidden': false,
        'index': true
      },
      'Page_URL': {
        'type': 'text',
        'value': '',
        'display': true,
        'ordered': false,
        'length': 255,
        'textlines': 1,
        'hidden': false,
        'index': true
      },
      'Time': {
        'type': 'text',
        'value': '',
        'display': true,
        'ordered': false,
        'length': 50,
        'textlines': 1,
        'hidden': false,
        'index': true
      },
      'visit_id': {
        'type': 'text',
        'value': '',
        'display': true,
        'ordered': false,
        'length': 50,
        'textlines': 1,
        'hidden': false,
        'index': true
      },
      'pageview_id': {
        'type': 'text',
        'value': '',
        'display': true,
        'ordered': false,
        'length': 50,
        'textlines': 1,
        'hidden': false,
        'index': true
      }
    },
    'Links': {
      'Link_URL': {
        'type': 'text',
        'value': '',
        'display': true,
        'ordered': false,
        'length': 255,
        'textlines': 1,
        'hidden': false,
        'index': true
      },
      'Link_title': {
        'type': 'text',
        'value': '',
        'display': true,
        'ordered': false,
        'length': 255,
        'textlines': 1,
        'hidden': false,
        'index': true
      },
      'Time': {
        'type': 'text',
        'value': '',
        'display': true,
        'ordered': false,
        'length': 50,
        'textlines': 1,
        'hidden': false,
        'index': true
      }
    },
    'Forms': {
      'FormName': {
        'type': 'text',
        'value': '',
        'display': true,
        'ordered': false,
        'length': 255,
        'textlines': 1,
        'hidden': false,
        'index': true
      },
      'Time': {
        'type': 'text',
        'value': '',
        'display': true,
        'ordered': false,
        'length': 50,
        'textlines': 1,
        'hidden': false,
        'index': true
      },
      'FillID': {
        'type': 'text',
        'value': '',
        'display': true,
        'ordered': false,
        'length': 50,
        'textlines': 1,
        'hidden': false,
        'index': true
      }
    },
    'Downloads': {
      'DownloadName': {
        'type': 'text',
        'value': '',
        'display': true,
        'ordered': false,
        'length': 255,
        'textlines': 1,
        'hidden': false,
        'index': true
      },
      'Time': {
        'type': 'datetime',
        'value': '',
        'display': true,
        'ordered': false,
        'hidden': false,
        'index': true,
        'empty': true
      },
      'DownloadID': {
        'type': 'text',
        'value': '',
        'display': true,
        'ordered': false,
        'length': 50,
        'textlines': 1,
        'hidden': false,
        'index': true
      },
      'AutoCamp': {
        'type': 'text',
        'value': '',
        'display': true,
        'ordered': false,
        'length': 50,
        'textlines': 1,
        'hidden': false,
        'index': true
      }
    }
  };

  /*
  # Copernica Base Client
  */


  Copernica_Base = (function() {
    function Copernica_Base(options, callback) {
      var defaults, key, val, _ref;
      if (options == null) {
        options = {};
      }
      defaults = {
        'state': {},
        'url': 'http://soap.copernica.com',
        'credentials': {
          'username': null,
          'account': null,
          'password': null
        },
        'database': null
      };
      if (typeof options === 'function') {
        callback = options;
        options = {};
      }
      this.options = _.extend(defaults, options);
      _ref = this.options.state;
      for (key in _ref) {
        val = _ref[key];
        this[key] = val;
      }
      if (typeof callback === 'function') {
        this.init(callback);
      }
    }

    Copernica_Base.prototype.init = function(callback) {
      var createClient, login, saveCredentials, selectDatabase,
        _this = this;
      async.waterfall([
        createClient = function(next) {
          if (_this.client != null) {
            return next(null, _this.client);
          } else {
            return soap.createClient("" + _this.options.url + "?SOAPAPI=WSDL", next);
          }
        }, login = function(client, next) {
          _this.client = client;
          if (_this.cookies != null) {
            return next(null, '_trakapo_alreadyGotCookies', 'yolo');
          } else {
            return client.login({
              'parameters': _this.options.credentials
            }, next);
          }
        }, saveCredentials = function(data, response, next) {
          var cookie, cookies, outCookies, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4;
          if (data === '_trakapo_alreadyGotCookies') {
            return next(null, _this.cookies);
          } else {
            if (((_ref = _this.client.lastResponseObj) != null ? _ref.headers : void 0) == null) {
              console.log('malformed lastResponseObj', data, response);
              console.log(data.headers);
              console.log(response.headers);
              console.log((_ref1 = _this.client.lastResponseObj) != null ? _ref1.headers : void 0);
              console.log((_ref2 = _this.client.lastResponse) != null ? _ref2.headers : void 0);
              next('malformed lastResponseObj');
            }
            cookies = ((_ref3 = _this.client.lastResponseObj) != null ? (_ref4 = _ref3.headers) != null ? _ref4['set-cookie'] : void 0 : void 0) || [];
            outCookies = [];
            for (_i = 0, _len = cookies.length; _i < _len; _i++) {
              cookie = cookies[_i];
              if ('soap_' === cookie.substr(0, 5)) {
                outCookies.push(cookie);
              }
            }
            return next(null, outCookies);
          }
        }, selectDatabase = function(cookies, next) {
          _this.cookies = cookies;
          if (_this.currentDB != null) {
            return next(null, _this);
          } else if (_this.options.database != null) {
            return _this.selectDB(_this.options.database, next);
          } else {
            return next(null, _this);
          }
        }
      ], function(err, obj) {
        return callback(err, obj);
      });
      return this;
    };

    Copernica_Base.prototype.selectDB = function(identifier, callback) {
      var _this = this;
      this.request('Account_database', {
        'identifier': identifier
      }, {
        'noDb': true
      }, function(err, data) {
        var _ref;
        if (((_ref = data.result) != null ? _ref.database : void 0) == null) {
          return callback('No database');
        } else {
          _this.currentDB = data.result.database;
          return callback(err, _this);
        }
      });
      return this;
    };

    Copernica_Base.prototype.getCollections = function(callback) {
      var params;
      params = {
        'allproperties': true
      };
      return this.request('Database_collections', params, function(err, data) {
        return callback(err, [].concat(data.result.items.collection));
      });
    };

    Copernica_Base.prototype.createCollection = function(name, callback) {
      var params;
      params = {
        'name': name
      };
      return this.request('Database_createCollection', params, function(err, data) {
        return callback(err, data.result.collection);
      });
    };

    Copernica_Base.prototype.removeCollection = function(id, callback) {
      var params;
      params = {
        'id': id
      };
      return this.request('Collection_remove', params, function(err, data) {
        if (err || data.result.value !== '1') {
          return callback(err || 'Unknown error');
        } else {
          return callback(err, this);
        }
      });
    };

    Copernica_Base.prototype.createCollectionField = function(definition, callback) {
      return this.request('Collection_createField', definition, function(err, data) {
        return callback(err, data.result.collectionfield);
      });
    };

    Copernica_Base.prototype.request = function(method, params, options, callback) {
      if (params == null) {
        params = {};
      }
      if (options == null) {
        options = {};
      }
      if ('function' === typeof params) {
        callback = params;
        params = {};
      } else if ('function' === typeof options) {
        callback = options;
        options = {};
      }
      if (this.client == null) {
        return callback(error('notInitilaised'));
      }
      if (this.cookies == null) {
        return callback(error('notLoggedIn'));
      }
      if (!options.noDb) {
        if (this.currentDB == null) {
          return callback(error('noDatabase'));
        }
        if (params.id == null) {
          params.id = this.currentDB.id;
        }
      }
      this.client[method]({
        'parameters': params
      }, callback, {
        'headers': {
          'Cookie': this.cookies.join(';')
        }
      });
      return this;
    };

    return Copernica_Base;

  })();

  /*
  # Simple Copernica Profile Model
  */


  Copernica_Profile = (function(_super) {
    __extends(Copernica_Profile, _super);

    function Copernica_Profile(options, callback) {
      var defaults;
      if (options == null) {
        options = {};
      }
      defaults = {};
      if (this.soapMethods == null) {
        this.soapMethods = {
          'search': 'Database_searchProfiles',
          'create': 'Database_createProfile',
          'update': 'Profile_updateFields',
          'remove': 'Profile_remove'
        };
      }
      if (this.returnProperties == null) {
        this.returnProperties = {
          'search': 'profile',
          'create': 'profile'
        };
      }
      if (typeof options === 'function') {
        callback = options;
        options = {};
      }
      Copernica_Profile.__super__.constructor.call(this, _.extend(defaults, options), callback);
    }

    Copernica_Profile.prototype.profile = function(id, fieldsToAdd, callback, subprofileOptions) {
      var createIfNeeded, loadProfile,
        _this = this;
      if (fieldsToAdd == null) {
        fieldsToAdd = {};
      }
      if (subprofileOptions == null) {
        subprofileOptions = false;
      }
      return async.waterfall([
        loadProfile = function(next) {
          return _this._search(id, subprofileOptions || {}, next);
        }, createIfNeeded = function(profile, next) {
          var row, _i, _len, _ref;
          profile = [].concat(profile);
          if (profile.length === 0 || profile[0] === void 0 || Object.keys(profile[0]).length === 0) {
            return _this._create(_.extend(id, fieldsToAdd), subprofileOptions || {}, function(err, data) {
              return next(err, data);
            });
          } else {
            profile = profile.shift();
            profile._fields = {};
            _ref = [].concat(profile.fields.pair);
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              row = _ref[_i];
              if (fieldsToAdd[row.key] != null) {
                profile._fields[row.key] = fieldsToAdd[row.key];
              } else {
                profile._fields[row.key] = row.value;
              }
            }
            return _this._update(profile.id, fieldsToAdd, function(err, data) {
              return next(err, profile);
            });
          }
        }
      ], function(err, profile) {
        if (!subprofileOptions) {
          _this.currentProfile = profile;
          return callback(err, _this);
        } else {
          return callback(err, profile);
        }
      });
    };

    Copernica_Profile.prototype.subprofile = function(id, fieldsToAdd, options, callback) {
      var opts;
      if (fieldsToAdd == null) {
        fieldsToAdd = {};
      }
      if (options == null) {
        options = {};
      }
      opts = {
        'state': {
          'client': this.client,
          'cookies': this.cookies,
          'currentDB': this.currentDB,
          'currentProfile': this.currentProfile
        }
      };
      return new Copernica_Subprofile(opts, function(err, obj) {
        return obj.profile(id, fieldsToAdd, callback, _.extend(options, {
          'id': opts.state.currentProfile.id
        }));
      });
    };

    Copernica_Profile.prototype._search_verify = function(query) {
      return false;
    };

    Copernica_Profile.prototype._search = function(query, options, callback) {
      var err, key, params, val,
        _this = this;
      if (options == null) {
        options = {};
      }
      if (typeof options === 'function') {
        callback = options;
        options = {};
      }
      if (err = this._search_verify(query)) {
        return callback(err);
      }
      params = {
        'allproperties': true,
        'requirements': {
          'requirement': []
        }
      };
      params = _.extend(params, options);
      for (key in query) {
        val = query[key];
        params.requirements.requirement.push({
          'fieldname': key,
          'casesensitive': false,
          'operator': '=',
          'value': val
        });
      }
      return this.request(this.soapMethods.search, params, function(err, data) {
        var row, _i, _len, _ref, _ref1, _ref2, _ref3;
        if ((data != null ? (_ref = data.result) != null ? _ref.items : void 0 : void 0) != null) {
          if ((data != null ? (_ref1 = data.result) != null ? (_ref2 = _ref1.items) != null ? _ref2[_this.returnProperties.search] : void 0 : void 0 : void 0) != null) {
            data = [].concat(data.result.items[_this.returnProperties.search]);
            for (_i = 0, _len = data.length; _i < _len; _i++) {
              row = data[_i];
              if ((_ref3 = data.fields) != null) {
                _ref3.pair = [].concat(data.fields.pair);
              }
            }
            return callback(err, data);
          } else {
            return callback(err, {});
          }
        } else {
          console.log('Invalid search result', data);
          return callback('Invalid search result');
        }
      });
    };

    Copernica_Profile.prototype._create_verify = function(fields) {
      return false;
    };

    Copernica_Profile.prototype._create = function(fields, options, callback) {
      var err, key, params, value,
        _this = this;
      if (options == null) {
        options = {};
      }
      if (typeof options === 'function') {
        callback = options;
        options = {};
      }
      if (err = this._create_verify(fields)) {
        return callback(err);
      }
      params = {
        'fields': {
          'pair': []
        }
      };
      params = _.extend(params, options);
      for (key in fields) {
        value = fields[key];
        params.fields.pair.push({
          'key': key,
          'value': value
        });
      }
      return this.request(this.soapMethods.create, params, function(err, data) {
        var _ref;
        if ((_ref = data.result[_this.returnProperties.create].fields) != null) {
          _ref.pair = [].concat(data.result[_this.returnProperties.create].fields.pair);
        }
        return callback(err, data.result[_this.returnProperties.create]);
      });
    };

    Copernica_Profile.prototype._update = function(id, fields, callback) {
      var key, params, value,
        _this = this;
      if (id == null) {
        return callback(error('noId'));
      }
      if (Object.keys(fields).length === 0) {
        return callback(error('emptyFields'));
      }
      params = {
        'id': id,
        'timestamp': +(new Date) / 1000,
        'fields': {
          'pair': []
        }
      };
      for (key in fields) {
        value = fields[key];
        params.fields.pair.push({
          'key': key,
          'value': value
        });
      }
      return this.request(this.soapMethods.update, params, function(err, data) {
        if (err || data.result.value !== '1') {
          return callback(err || 'Unknown error');
        } else {
          return callback(err, _this);
        }
      });
    };

    Copernica_Profile.prototype._remove = function(id, callback) {
      var params;
      if (id == null) {
        return callback(error('noId'));
      }
      params = {
        'id': id
      };
      return this.request(this.soapMethods.remove, params, function(err, data) {
        if (err || data.result.value !== '1') {
          return callback(err || 'Unknown error');
        } else {
          return callback(err, this);
        }
      });
    };

    return Copernica_Profile;

  })(Copernica_Base);

  /*
  # Simple Copernica SubProfile model
  */


  Copernica_Subprofile = (function(_super) {
    __extends(Copernica_Subprofile, _super);

    function Copernica_Subprofile(options, callback) {
      var defaults;
      if (options == null) {
        options = {};
      }
      defaults = {};
      if (this.soapMethods == null) {
        this.soapMethods = {
          'search': 'Profile_searchSubProfiles',
          'create': 'Profile_createSubProfile',
          'update': 'SubProfile_updateFields',
          'remove': 'SubProfile_remove'
        };
      }
      if (this.returnProperties == null) {
        this.returnProperties = {
          'search': 'subprofile',
          'create': 'subprofile'
        };
      }
      if (typeof options === 'function') {
        callback = options;
        options = {};
      }
      Copernica_Subprofile.__super__.constructor.call(this, _.extend(defaults, options), callback);
    }

    Copernica_Subprofile.prototype._search_verify = function(query) {
      return false;
    };

    Copernica_Subprofile.prototype._create_verify = function(fields) {
      return false;
    };

    return Copernica_Subprofile;

  })(Copernica_Profile);

  /*
  # Trakapo HookService
  */


  module.exports = {
    'setup': function(options, callback) {
      var addMissingCollections, connectToCopernica, getCurrentCollections;
      return callback();
      return async.waterfall([
        connectToCopernica = function(next) {
          return new Copernica_Base(options, next);
        }, getCurrentCollections = function(copernica, next) {
          return copernica.getCollections(function(err, currentCollections) {
            return next(err, currentCollections, copernica);
          });
        }, addMissingCollections = function(currentCollections, copernica, next1) {
          return async.map(Object.keys(collections), (function(collectionName, next2) {
            var createCollection, createFields, row, _i, _len;
            for (_i = 0, _len = currentCollections.length; _i < _len; _i++) {
              row = currentCollections[_i];
              if (collectionName === (row != null ? row.name : void 0)) {
                return next2(null);
              }
            }
            return async.waterfall([
              createCollection = function(next3) {
                return copernica.createCollection(collectionName, next3);
              }, createFields = function(collection, next3) {
                var fields;
                fields = collections[collectionName];
                return async.map(Object.keys(fields), (function(fieldName, next4) {
                  var params;
                  params = fields[fieldName];
                  params.name = fieldName;
                  params.id = collection.id;
                  return copernica.createCollectionField(params, next4);
                }), next3);
              }
            ], next2);
          }), function(err, results) {
            return next1(err, results, copernica);
          });
        }
      ], callback);
    },
    'exec': function(hook, data, callback) {
      var counts, log, options, _log_current_profile;
      return callback();
      counts = [];
      _log_current_profile = 'N/A';
      log = function() {
        return console.log.apply(console, ["\tCopernica (" + _log_current_profile + "):"].concat(Array.prototype.slice.apply(arguments)));
      };
      log("starting exec");
      options = hook.options;
      data = [].concat(data);
      counts[0] = 0;
      return async.map(data, (function(profile, next) {
        var addSessions, getCollections, loadCopernica, updateProfile;
        log("map on data - current profile size", JSON.stringify(profile).length, " - iteration", ++counts[0], " of ", data.length);
        _log_current_profile = profile._id;
        return async.waterfall([
          loadCopernica = function(next1) {
            var copProfile;
            log("loading copernica");
            return copProfile = new Copernica_Profile(options, next1);
          }, updateProfile = function(copernica, next1) {
            var data_fields, id_fields, _ref;
            log("updating profile");
            id_fields = {
              'Email': profile.email
            };
            data_fields = {
              'uid': profile._id,
              'LeadScore': ((_ref = profile.score) != null ? _ref.score : void 0) || 0
            };
            return copernica.profile(id_fields, data_fields, next1);
          }, getCollections = function(copernica, next1) {
            log("getting collections");
            return copernica.getCollections(function(err, collections) {
              return next1(err, copernica, collections);
            });
          }, addSessions = function(copernica, collections, next1) {
            var collectionsMap, i, row;
            log("processing sessions");
            collectionsMap = {};
            for (i in collections) {
              row = collections[i];
              collectionsMap[row.name] = i;
            }
            counts[1] = 0;
            return async.map(profile.devices || [], (function(device, next2) {
              log("map on profile.device - current device size", JSON.stringify(device).length, " - iteration", ++counts[1], " of ", profile.devices.length);
              counts[2] = 0;
              return async.map(device.sessions || [], (function(session, next3) {
                var pvid;
                log("map on device.sessions - current session size", JSON.stringify(session).length, " - iteration", ++counts[2], " of ", device.sessions.length);
                pvid = 0;
                counts[3] = 0;
                return async.map(session.actions || [], (function(action, next4) {
                  var fields, id, _ref;
                  log("map on session.actions - current action size", JSON.stringify(action).length, " - iteration", ++counts[3], " of ", session.actions.length);
                  if (action._value.type === 'page' && (_ref = action._value.url.slice(-3), __indexOf.call(downloadFileTypes, _ref) >= 0)) {
                    action._value.type = 'download';
                  }
                  switch (action._value.type) {
                    case 'page':
                      id = {
                        'pageview_id': actionId(action._time, action._value.url),
                        'visit_id': session._id
                      };
                      fields = {
                        'Page_title': action._value.title || '',
                        'Page_URL': action._value.url,
                        'Time': ISOtoCopernica(action._time)
                      };
                      options = {
                        'collection': collections[collectionsMap['Pages']]
                      };
                      break;
                    case 'download':
                      id = {
                        'DownloadID': actionId(action._time, action._value.url)
                      };
                      fields = {
                        'DownloadName': action._value.url,
                        'Time': ISOtoCopernica(action._time)
                      };
                      options = {
                        'collection': collections[collectionsMap['Downloads']]
                      };
                      break;
                    case 'form':
                      id = {
                        'fillID': actionId(action._time, action._value.form_id)
                      };
                      fields = {
                        'FormName': action._value.form_id,
                        'Time': ISOtoCopernica(action._time)
                      };
                      options = {
                        'collection': collections[collectionsMap['Forms']]
                      };
                      break;
                    default:
                      return next4();
                  }
                  options.id = copernica.currentProfile.id;
                  return copernica.subprofile(id, fields, options, next4);
                }), function(err, data) {
                  var basket, basket_out, doBasket, doLineItems, doOrder, finishSession, key, max, order, times, val, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
                  log("map on session.actions complete");
                  times = [];
                  _ref = session.actions;
                  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    row = _ref[_i];
                    if (row._time) {
                      times.push(new Date(row._time));
                    }
                  }
                  finishSession = function(err) {
                    var fields, id;
                    log("finishing session");
                    if (err) {
                      return next3(err);
                    }
                    id = {
                      'Session_ID': session._id
                    };
                    fields = {
                      'Length_of_visit': humanTime((Math.max.apply(Math, times) - Math.min.apply(Math, times)) / 1000),
                      'Number_of_pages_visited': session.actions.length,
                      'Start_time': ISOtoCopernica(session.actions[0]._time)
                    };
                    options = {
                      'collection': collections[collectionsMap['Visits']]
                    };
                    return copernica.subprofile(id, fields, options, next3);
                  };
                  if (basket = session.basket) {
                    log("starting basket handling");
                    order = {
                      'order_status': 'basket',
                      'date': ISOtoCopernica(session._updated),
                      'total': 100 * (parseFloat((_ref1 = (_ref2 = basket.price) != null ? _ref2.discountedtotal : void 0) != null ? _ref1 : 0) || (parseFloat((_ref3 = (_ref4 = basket.price) != null ? _ref4.items : void 0) != null ? _ref3 : 0) + parseFloat((_ref5 = (_ref6 = basket.price) != null ? _ref6.specialdiscount : void 0) != null ? _ref5 : 0)))
                    };
                    basket_out = {
                      'value': order.total,
                      'Number_of_items': (_ref7 = (_ref8 = basket.basket) != null ? _ref8.length : void 0) != null ? _ref7 : 0,
                      'status': 'live'
                    };
                    if (basket.stage != null) {
                      max = 0;
                      _ref9 = basket.stage;
                      for (key in _ref9) {
                        val = _ref9[key];
                        val = +new Date(val);
                        if (val === Math.max(max, val)) {
                          max = val;
                          order.order_status = key;
                        }
                      }
                    }
                    if (order.order_status === 'completed') {
                      basket_out.status = 'ordered';
                    } else if ((new Date() - new Date(session._updated)) > 180000) {
                      basket_out.status = 'abandoned';
                    } else if (order.order_status === 'basket') {
                      basket_out.status = 'live';
                    } else {
                      basket_out.status = order.order_status;
                    }
                    return async.series([
                      doOrder = function(next4) {
                        var id;
                        log("doing order for current session");
                        if (order.order_status !== 'completed') {
                          return next4();
                        }
                        id = {
                          'order_id': session._id
                        };
                        options = {
                          'collection': collections[collectionsMap['Orders']]
                        };
                        return copernica.subprofile(id, order, options, next4);
                      }, doBasket = function(next4) {
                        var id;
                        log("doing basket for current session");
                        id = {
                          'session_id': session._id
                        };
                        options = {
                          'collection': collections[collectionsMap['Basket']]
                        };
                        return copernica.subprofile(id, basket_out, options, next4);
                      }, doLineItems = function(next4) {
                        var doLineItem, id;
                        log("doing line items for current session");
                        options = {
                          'collection': collections[collectionsMap['Products']]
                        };
                        id = {
                          'orderID': session._id
                        };
                        doLineItem = function(item, next45) {
                          var product, urlparts;
                          log("map on basket.basket - current item size", JSON.stringify(item).length, " - iteration", ++counts[4], " of ", basket.basket.length);
                          urlparts = item.product_url.split('/');
                          id.SKU = urlparts[4];
                          product = {
                            'Name': item.name,
                            'Price': 100 * parseFloat(item.price),
                            'Category': urlparts[5]
                          };
                          return copernica.subprofile(id, product, options, next45);
                        };
                        counts[4] = 0;
                        return async.mapSeries(basket.basket || [], doLineItem, next4);
                      }
                    ], finishSession);
                  } else {
                    return finishSession();
                  }
                });
              }), next2);
            }), function(err, results) {
              var meaningfulResult;
              log("current profile completed");
              meaningfulResult = {
                'profile_id': profile._id,
                'copernica_id': copernica.currentProfile.id,
                'time': +(new Date)
              };
              return next1(err, meaningfulResult, copernica);
            });
          }
        ], next);
      }), callback);
    },
    '_classes': {
      'Copernica_Base': Copernica_Base,
      'Copernica_Profile': Copernica_Profile,
      'Copernica_Subprofile': Copernica_Subprofile
    }
  };

}).call(this);

/*
//@ sourceMappingURL=copernica.map
*/
