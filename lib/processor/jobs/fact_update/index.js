// Generated by CoffeeScript 1.6.3
(function() {
  var Cache, async, http, q,
    __slice = [].slice;

  http = require('./http');

  q = require('q');

  async = require('async');

  Cache = require('shared-cache');

  module.exports = function(job, done) {
    var fns, row, s, store, t, time,
      _this = this;
    store = {};
    store.accountID = job.data.account;
    time = new Date(parseInt(job.created_at));
    row = job.data.data;
    s = +(new Date);
    t = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      args.push((+(new Date)) - s);
      return console.log.apply(console.log, args);
    };
    fns = {};
    fns.account = function(next) {
      return loadAccount(store.accountID, store.fn1 = function(err, acc) {
        store.account = acc;
        return next(err);
      });
    };
    fns.setup = function(next) {
      var _base, _base1, _base2, _base3;
      if ((_base = store.account).hooks == null) {
        _base.hooks = Cache.create('hooks-' + store.accountID, true, store.fn2 = function(key, next) {
          return store.account.database.collection('hooks').find().toArray(next);
        });
      }
      if ((_base1 = store.account).settings == null) {
        _base1.settings = Cache.create('fact-settings-' + store.accountID, true, store.fn3 = function(key, next) {
          return store.account.database.collection('fact_settings').find().toArray(next);
        });
      }
      if ((_base2 = store.account).conditions == null) {
        _base2.conditions = Cache.create('fact-conditions-' + store.accountID, true, store.fn4 = function(key, next) {
          return store.account.database.collection('conditions').find().toArray(next);
        });
      }
      if ((_base3 = store.account).actions == null) {
        _base3.actions = Cache.create('actions-' + store.accountID, true, store.fn5 = function(key, next) {
          return store.account.database.collection('actions').find().toArray(next);
        });
      }
      return next();
    };
    fns.hooks = function(next) {
      return store.account.hooks.get(store.fn6 = function(e, r) {
        return next(e, r);
      });
    };
    fns.settings = function(next) {
      return store.account.settings.get(store.fn7 = function(e, r) {
        return next(e, r);
      });
    };
    fns.conditions = function(next) {
      return store.account.conditions.get(store.fn8 = function(e, r) {
        return next(e, r);
      });
    };
    fns.actions = function(next) {
      return store.account.actions.get(store.fn9 = function(e, r) {
        return next(e, r);
      });
    };
    fns.fact = function(next) {
      return new Fact_deferred_Model(store.account, row.fact_type, store.fn10 = function() {
        var model;
        model = this;
        return this.load({
          _id: row.fact_id
        }, true, store.fn11 = function(err, fact) {
          if (fact == null) {
            fact = {};
          }
          if (err || !fact._id) {
            return next(err || 'Bad ID');
          }
          if (row.version && fact._updated.toJSON() !== row.version) {
            job.log("Skipped due to invalid version");
            return next("Invalid version");
          }
          return next(null, model);
        });
      });
    };
    return async.series(fns, store.fn12 = function(err, results) {
      var actions, conditions, context, doConditions, evals, evaluate, fact, filter, hooks, key, props, settings;
      filter = function(obj) {
        return row.fact_type === obj.fact_type;
      };
      hooks = results.hooks.filter(filter);
      conditions = results.conditions.filter(filter);
      actions = results.actions.filter(filter);
      settings = results.settings.filter(function(setting) {
        return setting._id === row.fact_type;
      }).pop() || {};
      if (settings.field_modes == null) {
        settings.field_modes = {};
      }
      if (settings.foreign_keys == null) {
        settings.foreign_keys = {};
      }
      fact = results.fact;
      if (err) {
        if (err === 'Invalid version') {
          return done();
        }
        return done(err);
      }
      if ((fact != null ? fact.data : void 0) == null) {
        return done('Invalid fact');
      }
      context = {
        http: http,
        q: q,
        fact: fact.data,
        load: function(type, id) {
          var defer;
          defer = require('q').defer();
          new Fact_deferred_Model(store.account, type, store.fn13 = function() {
            return this.load({
              _id: id
            }, store.fn14 = function(err, found) {
              if (err || !found) {
                return defer.reject(err || 'Not found');
              }
              return defer.resolve(this.data);
            });
          });
          return defer.promise;
        }
      };
      evals = (function() {
        var _ref, _results;
        _ref = settings.field_modes;
        _results = [];
        for (key in _ref) {
          props = _ref[key];
          if (props["eval"]) {
            _results.push([key, props]);
          }
        }
        return _results;
      })();
      evaluate = function(arr, next) {
        var _this = this;
        key = arr[0], props = arr[1];
        return fact.withMap([], props.map, context, store.fn15 = function(err, map) {
          var k, v;
          for (k in context) {
            v = context[k];
            map[k] = v;
          }
          return fact.data["eval"](props["eval"], map, store.fn16 = function(err, result) {
            var _ref;
            result = (_ref = result != null ? result : props["default"]) != null ? _ref : null;
            fact.data.set.call(fact.data.data, key, result);
            return next(null, {
              key: key,
              value: result
            });
          });
        });
      };
      doConditions = function(condition, next) {
        return fact.evaluateCondition(condition, context, store.fn17 = function(err, result) {
          result = !err && result.every(Boolean);
          return next(null, {
            key: '_conditions.' + condition.condition_id,
            value: result
          });
        });
      };
      return async.mapSeries(evals, evaluate, store.fn18 = function(err, cols1) {
        return async.mapSeries(conditions, doConditions, store.fn19 = function(err, cols2) {
          var col, columns, list, set, _i, _len;
          columns = cols1.concat(cols2).filter(Boolean);
          time = new Date;
          if (columns.length > 0) {
            set = {};
            for (_i = 0, _len = columns.length; _i < _len; _i++) {
              col = columns[_i];
              set[col.key] = col.value;
            }
            set._updated = time;
            fact.table.update({
              _id: fact.data._id
            }, {
              $set: set
            }, function() {
              return null;
            });
          }
          list = hooks.map(store.fn20 = function(hook) {
            return jobs.create('hook_send', {
              title: "" + hook.hook_id + " - " + row.fact_type + " - " + row.fact_id,
              account: store.accountID,
              data: {
                hook_id: hook.hook_id,
                fact_type: hook.fact_type,
                fact_id: fact.data._id,
                version: time
              }
            });
          });
          list = list.concat(actions.map(store.fn21 = function(action) {
            return job = jobs.create('perform_action', {
              title: "" + action.action_id + " - " + row.fact_type + " - " + row.fact_id,
              account: store.accountID,
              data: {
                action_id: action.action_id,
                fact_type: action.fact_type,
                fact_id: fact.data._id,
                version: time,
                stage: -1
              }
            });
          }));
          return async.each(list, (function(job, next) {
            return job.save(next);
          }), store.fn22 = function(err) {
            var k;
            for (k in store) {
              store[k] = null;
              delete store[k];
            }
            job = null;
            return done(null, columns);
          });
        });
      });
    });
  };

  module.exports.concurrency = 1;

  module.exports.timeout = 10000;

}).call(this);

/*
//@ sourceMappingURL=index.map
*/
