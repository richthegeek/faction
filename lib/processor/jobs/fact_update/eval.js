// Generated by CoffeeScript 1.6.3
(function() {
  var async, deleteColumn, getColumn, moment, setColumn, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  async = require('async');

  moment = require('moment');

  _ref = require('../info/column_ops'), getColumn = _ref.getColumn, setColumn = _ref.setColumn, deleteColumn = _ref.deleteColumn;

  module.exports = function(fact, key, settings, context, callback) {
    return async.waterfall([
      function(next) {
        return fact.withMap([], settings.map, context, function(err, map) {
          return next(null, map);
        });
      }, function(map, next) {
        var k, v, _ref1;
        for (k in context) {
          v = context[k];
          map[k] = (_ref1 = map[k]) != null ? _ref1 : v;
        }
        return fact.data["eval"](settings["eval"], map, function(err, res) {
          var _ref2;
          res = (_ref2 = res != null ? res : settings["default"]) != null ? _ref2 : null;
          return next(null, res);
        });
      }, function(new_value, next) {
        var date, eval_field, field, format, formats, grouped_modes, mode;
        grouped_modes = ['newest', 'oldest', 'inc', 'min', 'max'];
        mode = settings.mode;
        field = key;
        formats = {
          day: 'YYYY-MM-DD',
          week: 'YYYY-WW',
          month: 'YYYY-MM',
          year: 'YYYY'
        };
        if (format = formats[settings.grouping]) {
          if (__indexOf.call(grouped_modes, mode) >= 0) {
            date = moment().format(format);
            eval_field = field + '["' + date + '"]';
            field = field + '.' + date;
          }
        }
        return fact.data["eval"]('this.' + eval_field, function(err, old_value) {
          var name, result;
          result = {
            key: field,
            value: new_value,
            mode: 'set'
          };
          if (mode === 'inc') {
            result.value = Number(new_value) || 1;
            result.mode = 'inc';
          }
          if (mode === 'inc_map') {
            result.key = key + '.' + value.replace(/\./g, '%2E');
            result.value = 1;
            result.mode = 'inc';
          }
          if (mode === 'min' || mode === 'max') {
            if (new_value !== Math[mode].apply(null, [new_value, old_value].map(Number).filter(function(x) {
              return !isNaN(x);
            }))) {
              result = null;
            }
          }
          if (mode === 'oldest') {
            if (old_value) {
              result = null;
            }
          }
          if (mode === 'push' || mode === 'push_unique' || mode === 'all') {
            result.key = key;
            result.mode = 'push';
            if (mode === 'push_unique') {
              result.mode = 'addToSet';
            }
            if (mode === 'all') {
              result.value = {
                _time: fact._updated,
                _value: new_value
              };
            }
          }
          if (settings.latest && __indexOf.call(grouped_modes, mode) >= 0) {
            name = ('string' === typeof settings.latest && settings.latest) || 'latest';
            result = [
              result, {
                key: key + '.' + name,
                value: result.value,
                mode: result.mode
              }
            ];
          }
          return next(null, result);
        });
      }, function(result, next) {
        var row, _i, _len, _ref1;
        if (result) {
          _ref1 = [].concat.apply([], result);
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            row = _ref1[_i];
            fact.data.set(row.key, row.value);
          }
        }
        return next(null, result);
      }
    ], callback);
  };

}).call(this);

/*
//@ sourceMappingURL=eval.map
*/
