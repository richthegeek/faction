// Generated by CoffeeScript 1.6.3
(function() {
  var accounts, async, exec, fs, jobsPath, killProcessor, killSwitch, kue, last, path, processJobs, processing;

  console.log('Starting processor');

  accounts = {};

  global.loadAccount = function(accountID, next) {
    if (accounts[accountID] != null) {
      return next(null, accounts[accountID]);
    }
    return new Account_Model(function() {
      return this.load({
        _id: accountID
      }, function(err, found) {
        var _this = this;
        if (err || !found) {
          return err || 'No such account: ' + accountID;
        }
        return mongodb.open(this.dbname(), null, config.mongo.host, config.mongo.port, function(err, db) {
          accounts[accountID] = _this;
          _this.database = db;
          return next(err, _this);
        });
      });
    });
  };

  jobs.promote();

  async = require('async');

  fs = require('fs');

  path = require('path');

  exec = require('child_process').exec;

  jobsPath = path.resolve(__dirname, './jobs');

  killSwitch = false;

  processing = 0;

  killProcessor = function() {
    killSwitch = true;
    setInterval((function() {
      if (processing === 0) {
        return process.exit(0);
      }
    }), 100);
    return setTimeout((function() {
      return process.exit(0);
    }), 5000);
  };

  process.on('SIGINT', function() {
    console.log('Shutting down in < 5 seconds due to SIGINT Ctrl-C');
    return killProcessor();
  });

  processJobs = function(type, ready) {
    var disabled, idle, jobPath, multi, processor, timeout, times;
    jobPath = jobsPath + '/' + type;
    processor = require(jobPath);
    multi = Math.max(processor.concurrency | 0, 1);
    timeout = processor.timeout | 0;
    disabled = (processor.disabled === true) || (processor.concurrency === 0);
    if (disabled) {
      console.log("Skipping " + type + " tasks");
      return ready();
    }
    console.log("Processing " + multi + "x '" + type + "' tasks");
    times = [];
    idle = false;
    setInterval((function() {
      var max, mean, min, pad, percent, sum;
      pad = function(str, size) {
        if (size == null) {
          size = 5;
        }
        str = str.toString();
        while (str.length < size) {
          str = " " + str;
        }
        return str;
      };
      if (times.length > 0) {
        sum = pad(times.reduce(function(a, b) {
          return a + b;
        }));
        max = pad(times.reduce(function(a, b) {
          return Math.max(a, b);
        }));
        min = pad(times.reduce(function(a, b) {
          return Math.min(a, b);
        }));
        mean = pad(Math.round(sum / times.length));
        if ((timeout > 0) && (mean > timeout)) {
          console.log('Killing in 5 seconds due to speed problems');
          killProcessor();
        }
        percent = sum / (config.kue.interval * 10 * multi);
        percent = Math.round(percent);
        console.log("+", pad(type, 15), pad(times.length), pad("" + percent + "%"), [mean, min, max].join(" / "));
        idle = false;
        return times = [];
      } else {
        if (!idle) {
          console.log("`", pad(type, 15), 'idle');
        }
        return idle = true;
      }
    }), config.kue.interval * 1000);
    jobs.process(type, multi, function(job, complete) {
      var start;
      if (killSwitch) {
        job.state('inactive');
        job.save();
        return;
      }
      start = new Date;
      processing++;
      return processor(job, function(err, result) {
        var end, time;
        end = new Date;
        time = end - start;
        stats.increment("kue." + type, 1);
        stats.timing("kue." + type, time);
        times.push(time);
        if (err) {
          console.error('!', type, job.data.title, err);
          job.log(err);
        }
        jobs.create('delete_job', job.id).delay(10000).save();
        processing--;
        return complete();
      });
    });
    return ready();
  };

  kue = require('kue');

  last = null;

  jobs.process('delete_job', function(job, done) {
    var id;
    id = job.data;
    if (id === last) {
      return done();
    }
    last = id;
    process.nextTick(function() {
      return job.remove();
    });
    kue.Job.get(id, function(err, job) {
      if (err) {
        console.log('!', 'delete_job', id, err);
        return;
      }
      return job.remove();
    });
    return done();
  });

  async.each(fs.readdirSync(jobsPath), processJobs);

}).call(this);

/*
//@ sourceMappingURL=index.map
*/
