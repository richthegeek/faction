// Generated by CoffeeScript 1.6.3
(function() {
  var Contextify, accounts, exec, jobsPath, killProcessor, killSwitch, kue, processJobs, processing;

  console.log('Starting processor');

  accounts = {};

  global.loadAccount = function(accountID, next) {
    if (accounts[accountID] != null) {
      return next(null, accounts[accountID]);
    }
    return new Account_Model(function() {
      return this.load({
        _id: accountID
      }, function(err, found) {
        var _this = this;
        if (err || !found) {
          return err || 'No such account: ' + accountID;
        }
        return mongodb.open(this.dbname(), null, config.mongo.host, config.mongo.port, function(err, db) {
          accounts[accountID] = _this;
          _this.database = db;
          return next(err, _this);
        });
      });
    });
  };

  jobs.promote();

  global.async = require('async');

  global.fs = require('fs');

  global.path = require('path');

  exec = require('child_process').exec;

  Contextify = require('contextify');

  jobsPath = path.resolve(__dirname, './jobs');

  killSwitch = false;

  processing = 0;

  killProcessor = function() {
    killSwitch = true;
    setInterval((function() {
      if (processing === 0) {
        return process.exit(0);
      }
    }), 100);
    return setTimeout((function() {
      return process.exit(0);
    }), 5000);
  };

  process.on('SIGINT', function() {
    console.log('Shutting down in < 5 seconds due to SIGINT Ctrl-C');
    killProcessor();
    return setTimeout((function() {
      return process.on('SIGINT', function() {
        console.log('OK OK, I\'ll kill it now');
        return process.exit(0);
      });
    }), 100);
  });

  processJobs = function(type, ready) {
    var disabled, idle, jobPath, multi, processor, script, this_processing, timeout, times;
    jobPath = jobsPath + '/' + type;
    processor = require(jobPath);
    multi = Math.max(processor.concurrency | 0, 1);
    timeout = processor.timeout | 0;
    disabled = (processor.disabled === true) || (processor.concurrency === 0);
    if (disabled) {
      console.log("Skipping " + type + " tasks");
      return ready();
    }
    console.log("Processing " + multi + "x '" + type + "' tasks");
    script = Contextify.createScript('exec = ' + processor.exec.toString() + '; exec(job, done)');
    times = [];
    this_processing = 0;
    idle = false;
    setInterval((function() {
      var max, mean, min, pad, percent, sum;
      pad = function(str, size) {
        if (size == null) {
          size = 5;
        }
        str = str.toString();
        while (str.length < size) {
          str = " " + str;
        }
        return str;
      };
      if (times.length > 0) {
        sum = pad(times.reduce(function(a, b) {
          return a + b;
        }));
        max = pad(times.reduce(function(a, b) {
          return Math.max(a, b);
        }));
        min = pad(times.reduce(function(a, b) {
          return Math.min(a, b);
        }));
        mean = pad(Math.round(sum / times.length));
        if (false && (timeout > 0) && (mean > timeout)) {
          console.log('Killing in 5 seconds due to speed problems');
          killProcessor();
        }
        percent = sum / (config.kue.interval * 10 * multi);
        percent = Math.round(percent);
        console.log("+", pad(type, 15), pad(times.length), pad("" + percent + "%"), [mean, min, max].join(" / "));
        idle = false;
        times = [];
      }
      if (this_processing > 0) {
        console.log("#", pad(type, 15), "working on " + this_processing + " long jobs");
      }
      if (times.length === 0 && this_processing === 0) {
        if (!idle) {
          console.log("`", pad(type, 15), 'idle');
        }
        return idle = true;
      }
    }), config.kue.interval * 1000);
    jobs.process(type, multi, function(job, complete) {
      var context, key, start, val;
      if (killSwitch) {
        job.state('inactive');
        job.save();
        return;
      }
      start = new Date;
      processing++;
      this_processing++;
      context = {
        require: require,
        job: job
      };
      for (key in global) {
        val = global[key];
        context[key] = val;
      }
      return processor.setup(context, function(err, context) {
        context.done = function(err, result) {
          var end, time;
          processing--;
          this_processing--;
          end = new Date;
          time = end - start;
          console.log("$", type, "" + time + "ms", job.data.title);
          times.push(time);
          if (err) {
            console.error('!', type, job.data.title, err);
            job.log(err);
          }
          return complete();
        };
        context = Contextify.createContext(context);
        return script.runInContext(context);
      });
    });
    return ready();
  };

  kue = require('kue');

  jobs.on('job complete', function(id) {
    try {
      return kue.Job.get(id, function(err, job) {
        if (!err && job) {
          return job.remove(function() {
            return null;
          });
        }
      });
    } catch (_error) {}
  });

  async.each(fs.readdirSync(jobsPath), processJobs);

}).call(this);
