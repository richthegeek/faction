// Generated by CoffeeScript 1.6.3
var mongodb, _ref, _ref1;

mongodb = require('mongodb-opstream');

global.config = config || {};

if (config.db == null) {
  config.db = {};
}

if ((_ref = config.db) != null) {
  if (_ref.host == null) {
    _ref.host = 'localhost';
  }
}

if ((_ref1 = config.db) != null) {
  if (_ref1.port == null) {
    _ref1.port = 27017;
  }
}

mongodb.open = function(name, collection, callback) {
  var cached, db, options, server;
  if (typeof collection === 'function') {
    callback = collection;
    collection = null;
  }
  if (cached = mongodb.open_cache(name, collection)) {
    return callback(null, cached.database, cached.collection);
  }
  options = {
    'native_parser': false,
    'w': 1,
    'wtimeout': 100
  };
  server = new mongodb.Server(config.db.host, config.db.port);
  db = mongodb.Db(name, server, options);
  return db.open(function(err, db) {
    if (!collection) {
      mongodb.open_cache(name, null, db);
      return callback(null, db, null);
    } else {
      return db.collection(collection, function(err, col) {
        mongodb.open_cache(name, collection, col);
        return callback(null, db, col);
      });
    }
  });
};

mongodb.open_cache = function(name, collection, set) {
  var cache, _base;
  if (this.cache == null) {
    this.cache = {};
  }
  if (set) {
    if ((_base = this.cache)[name] == null) {
      _base[name] = {
        db: set,
        collections: {}
      };
    }
    this.cache[name].db = set;
    if (collection) {
      this.cache[name].db = set.db;
      return this.cache[name].collections[collection] = set;
    }
  } else if (cache = this.cache[name]) {
    collection = cache.collections[collection];
    return {
      database: cache.db,
      collection: collection
    };
  }
};

module.exports = mongodb;
