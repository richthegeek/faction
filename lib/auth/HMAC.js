// Generated by CoffeeScript 1.6.3
module.exports = function(req, res, next) {
  var _ref;
  if ((_ref = req.route.auth) !== null && _ref !== (void 0) && _ref !== 'hmac' && _ref !== 'HMAC') {
    return next();
  }
  if (!req.query.key || !req.query.key.toString().match(/^[a-f0-9]{32}/i)) {
    return next(new restify.InvalidCredentialsError('This route is authorised, but no public key has been provided in the query string.'));
  }
  if (!req.query.hash || !req.query.hash.toString().match(/^[a-f0-9]{64}/i)) {
    return next(new restify.InvalidCredentialsError('This route is authorised, but no request hash been provided in the query string.'));
  }
  return new Account_Model(function() {
    var id;
    id = req.query.key.substring(0, 16);
    return this.load({
      _id: id
    }, function(err, loaded) {
      var hash, hash_parts, key, name, regex, text;
      key = ((function() {
        var _ref1, _results;
        _ref1 = this.data.keys || {};
        _results = [];
        for (name in _ref1) {
          key = _ref1[name];
          if (key["public"] === req.query.key) {
            _results.push(key);
          }
        }
        return _results;
      }).call(this)).pop();
      if (err || !loaded || !key) {
        return next(new restify.InvalidCredentialsError('Unrecognised public key.'));
      }
      req.path = req.url.split('?').shift();
      hash_parts = [req.path, JSON.stringify(req.body || {}), key["private"]];
      hash = require('crypto').createHash('sha256').update(hash_parts.join('')).digest('hex');
      if (key.secure && hash !== req.query.hash) {
        return next(new restify.InvalidCredentialsError("Request signature did not match. (path = " + hash_parts[0] + ", body = " + hash_parts[1]));
      }
      if (key.secure === false) {
        console.log('Bypassing security');
      }
      req.key = key;
      req.account = this;
      delete req.params.key;
      delete req.params.hash;
      text = req.method.toUpperCase() + ' ' + req.path;
      while (key.parent) {
        key.endpoints = [].concat(key.endpoints);
        if (key.endpoints.length > 0 && ((function() {
          var _i, _len, _ref1, _results;
          _ref1 = key.endpoints;
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            regex = _ref1[_i];
            if (new RegExp('^' + regex).test(text)) {
              _results.push(1);
            }
          }
          return _results;
        })()).length === 0) {
          return next(restify.InvalidCredentialsError("Request is not allowed using this key due to endpoint restriction."));
        }
        key = req.account.data.keys[key.parent] || {
          parent: null
        };
      }
      return next();
    });
  });
};
