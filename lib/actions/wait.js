// Generated by CoffeeScript 1.6.3
module.exports = {
  name: 'wait',
  description: 'Delay the next step.',
  fields: {
    delay: 'The number of seconds to delay until the next step'
  },
  validate: function(action, callback) {
    var num;
    num = Number(action.delay || -1);
    if (isNaN(num) || num <= 0) {
      return callback('There must be a positive "delay" in number of seconds.');
    }
    return callback();
  },
  exec: function(info, next) {
    var hash, hash_parts, http, key, name, options, regex, text, used_key, _ref;
    http = require('http');
    console.warn('TODO: change hostname in wait action to api.faction.io');
    options = {
      hostname: "localhost",
      port: 9876,
      path: "/actions/" + info.action.fact_type + "/" + info.action.action_id + "/exec/" + info.fact._id + "/" + (info.stage + 1),
      method: 'GET'
    };
    used_key = null;
    text = 'GET ' + options.path;
    _ref = info.account.data.keys;
    for (name in _ref) {
      key = _ref[name];
      key.endpoints = [].concat(key.endpoints);
      if (key.endpoints.length === 0 || ((function() {
        var _i, _len, _ref1, _results;
        _ref1 = key.endpoints;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          regex = _ref1[_i];
          if (new RegExp('^' + regex).test(text)) {
            _results.push(1);
          }
        }
        return _results;
      })()).length > 0) {
        used_key = key;
        break;
      }
    }
    if (!used_key) {
      return next('The "wait" action requires at least one account key with access to GET /actions/.*/exec');
    }
    hash_parts = [];
    hash_parts.push(options.path);
    hash_parts.push(JSON.stringify({}));
    hash_parts.push(used_key["private"]);
    hash = require('crypto').createHash('sha256').update(hash_parts.join('')).digest('hex');
    options.path += '?key=' + used_key["public"];
    options.path += '&hash=' + hash;
    return http.get(options, function(res) {
      res.setEncoding('utf8');
      return res.on('data', function(chunk) {
        next(null, 'Wait paused execution', true);
        return next = function() {
          return null;
        };
      });
    });
  }
};
